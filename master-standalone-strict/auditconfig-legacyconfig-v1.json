{
  "description": "AuditConfig holds configuration for the audit capabilities",
  "type": "object",
  "required": [
    "enabled",
    "auditFilePath",
    "maximumFileRetentionDays",
    "maximumRetainedFiles",
    "maximumFileSizeMegabytes",
    "policyFile",
    "policyConfiguration",
    "logFormat",
    "webHookKubeConfig",
    "webHookMode"
  ],
  "properties": {
    "auditFilePath": {
      "description": "All requests coming to the apiserver will be logged to this file.",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "enabled": {
      "description": "If this flag is set, audit log will be printed in the logs. The logs contains, method, user and a requested URL.",
      "type": [
        "boolean",
        "null"
      ],
      "default": false
    },
    "logFormat": {
      "description": "Format of saved audits (legacy or json).",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "maximumFileRetentionDays": {
      "description": "Maximum number of days to retain old log files based on the timestamp encoded in their filename.",
      "type": [
        "integer",
        "null"
      ],
      "format": "int32",
      "default": 0
    },
    "maximumFileSizeMegabytes": {
      "description": "Maximum size in megabytes of the log file before it gets rotated. Defaults to 100MB.",
      "type": [
        "integer",
        "null"
      ],
      "format": "int32",
      "default": 0
    },
    "maximumRetainedFiles": {
      "description": "Maximum number of old log files to retain.",
      "type": [
        "integer",
        "null"
      ],
      "format": "int32",
      "default": 0
    },
    "policyConfiguration": {
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\":\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
      "type": [
        "object",
        "null"
      ]
    },
    "policyFile": {
      "description": "PolicyFile is a path to the file that defines the audit policy configuration.",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "webHookKubeConfig": {
      "description": "Path to a .kubeconfig formatted file that defines the audit webhook configuration.",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "webHookMode": {
      "description": "Strategy for sending audit events (block or batch).",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    }
  },
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}