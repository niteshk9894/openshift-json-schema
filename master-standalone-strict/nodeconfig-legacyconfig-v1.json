{
  "description": "NodeConfig is the fully specified config starting an OpenShift node\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
  "type": "object",
  "required": [
    "nodeName",
    "nodeIP",
    "servingInfo",
    "masterKubeConfig",
    "masterClientConnectionOverrides",
    "dnsDomain",
    "dnsIP",
    "dnsBindAddress",
    "dnsNameservers",
    "dnsRecursiveResolvConf",
    "networkConfig",
    "volumeDirectory",
    "imageConfig",
    "allowDisabledDocker",
    "podManifestConfig",
    "authConfig",
    "dockerConfig",
    "iptablesSyncPeriod",
    "enableUnidling",
    "volumeConfig"
  ],
  "properties": {
    "allowDisabledDocker": {
      "description": "AllowDisabledDocker if true, the Kubelet will ignore errors from Docker.  This means that a node can start on a machine that doesn't have docker started.",
      "type": [
        "boolean",
        "null"
      ],
      "default": false
    },
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ]
    },
    "authConfig": {
      "description": "NodeAuthConfig holds authn/authz configuration options",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "authenticationCacheTTL",
        "authenticationCacheSize",
        "authorizationCacheTTL",
        "authorizationCacheSize"
      ],
      "properties": {
        "authenticationCacheSize": {
          "description": "AuthenticationCacheSize indicates how many authentication results should be cached. If 0, the default cache size is used.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "authenticationCacheTTL": {
          "description": "AuthenticationCacheTTL indicates how long an authentication result should be cached. It takes a valid time duration string (e.g. \"5m\"). If empty, you get the default timeout. If zero (e.g. \"0m\"), caching is disabled",
          "type": "string",
          "default": ""
        },
        "authorizationCacheSize": {
          "description": "AuthorizationCacheSize indicates how many authorization results should be cached. If 0, the default cache size is used.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "authorizationCacheTTL": {
          "description": "AuthorizationCacheTTL indicates how long an authorization result should be cached. It takes a valid time duration string (e.g. \"5m\"). If empty, you get the default timeout. If zero (e.g. \"0m\"), caching is disabled",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "dnsBindAddress": {
      "description": "DNSBindAddress is the ip:port to serve DNS on. If this is not set, the DNS server will not be started. Because most DNS resolvers will only listen on port 53, if you select an alternative port you will need a DNS proxy like dnsmasq to answer queries for containers. A common configuration is dnsmasq configured on a node IP listening on 53 and delegating queries for dnsDomain to this process, while sending other queries to the host environments nameservers.",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "dnsDomain": {
      "description": "DNSDomain holds the domain suffix that will be used for the DNS search path inside each container. Defaults to 'cluster.local'.",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "dnsIP": {
      "description": "DNSIP is the IP address that pods will use to access cluster DNS. Defaults to the service IP of the Kubernetes master. This IP must be listening on port 53 for compatibility with libc resolvers (which cannot be configured to resolve names from any other port). When running more complex local DNS configurations, this is often set to the local address of a DNS proxy like dnsmasq, which then will consult either the local DNS (see dnsBindAddress) or the master DNS.",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "dnsNameservers": {
      "description": "DNSNameservers is a list of ip:port values of recursive nameservers to forward queries to when running a local DNS server if dnsBindAddress is set. If this value is empty, the DNS server will default to the nameservers listed in /etc/resolv.conf. If you have configured dnsmasq or another DNS proxy on the system, this value should be set to the upstream nameservers dnsmasq resolves with.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": [
          "string",
          "null"
        ],
        "default": ""
      }
    },
    "dnsRecursiveResolvConf": {
      "description": "DNSRecursiveResolvConf is a path to a resolv.conf file that contains settings for an upstream server. Only the nameservers and port fields are used. The file must exist and parse correctly. It adds extra nameservers to DNSNameservers if set.",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "dockerConfig": {
      "description": "DockerConfig holds Docker related configuration options.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "execHandlerName",
        "dockerShimSocket",
        "dockerShimRootDirectory"
      ],
      "properties": {
        "dockerShimRootDirectory": {
          "description": "DockershimRootDirectory is the dockershim root directory.",
          "type": "string",
          "default": ""
        },
        "dockerShimSocket": {
          "description": "DockerShimSocket is the location of the dockershim socket the kubelet uses. Currently unix socket is supported on Linux, and tcp is supported on windows. Examples:'unix:///var/run/dockershim.sock', 'tcp://localhost:3735'",
          "type": "string",
          "default": ""
        },
        "execHandlerName": {
          "description": "ExecHandlerName is the name of the handler to use for executing commands in containers.",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "enableUnidling": {
      "description": "EnableUnidling controls whether or not the hybrid unidling proxy will be set up",
      "type": [
        "boolean",
        "null"
      ]
    },
    "imageConfig": {
      "description": "ImageConfig holds the necessary configuration options for building image names for system components",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "format",
        "latest"
      ],
      "properties": {
        "format": {
          "description": "Format is the format of the name to be built for the system component",
          "type": "string",
          "default": ""
        },
        "latest": {
          "description": "Latest determines if the latest tag will be pulled from the registry",
          "type": "boolean",
          "default": false
        }
      },
      "additionalProperties": false
    },
    "iptablesSyncPeriod": {
      "description": "IPTablesSyncPeriod is how often iptable rules are refreshed",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ]
    },
    "kubeletArguments": {
      "description": "KubeletArguments are key value pairs that will be passed directly to the Kubelet that match the Kubelet's command line arguments.  These are not migrated or validated, so if you use them they may become invalid. These values override other settings in NodeConfig which may cause invalid configurations.",
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": {
        "type": [
          "array",
          "null"
        ],
        "items": {
          "type": [
            "string",
            "null"
          ],
          "default": ""
        }
      }
    },
    "masterClientConnectionOverrides": {
      "description": "ClientConnectionOverrides are a set of overrides to the default client connection settings.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "acceptContentTypes",
        "contentType",
        "qps",
        "burst"
      ],
      "properties": {
        "acceptContentTypes": {
          "description": "AcceptContentTypes defines the Accept header sent by clients when connecting to a server, overriding the default value of 'application/json'. This field will control all connections to the server used by a particular client.",
          "type": "string",
          "default": ""
        },
        "burst": {
          "description": "Burst allows extra queries to accumulate when a client is exceeding its rate.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "contentType": {
          "description": "ContentType is the content type used when sending data to the server from this client.",
          "type": "string",
          "default": ""
        },
        "qps": {
          "description": "QPS controls the number of queries per second allowed for this connection.",
          "type": "number",
          "format": "float",
          "default": 0
        }
      },
      "additionalProperties": false
    },
    "masterKubeConfig": {
      "description": "MasterKubeConfig is a filename for the .kubeconfig file that describes how to connect this node to the master",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "networkConfig": {
      "description": "NodeNetworkConfig provides network options for the node",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "networkPluginName",
        "mtu"
      ],
      "properties": {
        "mtu": {
          "description": "Maximum transmission unit for the network packets",
          "type": "integer",
          "format": "int64",
          "default": 0
        },
        "networkPluginName": {
          "description": "NetworkPluginName is a string specifying the networking plugin",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "networkPluginName": {
      "description": "Deprecated and maintained for backward compatibility, use NetworkConfig.NetworkPluginName instead",
      "type": [
        "string",
        "null"
      ]
    },
    "nodeIP": {
      "description": "Node may have multiple IPs, specify the IP to use for pod traffic routing If not specified, network parse/lookup on the nodeName is performed and the first non-loopback address is used",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "nodeName": {
      "description": "NodeName is the value used to identify this particular node in the cluster.  If possible, this should be your fully qualified hostname. If you're describing a set of static nodes to the master, this value must match one of the values in the list",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "podManifestConfig": {
      "description": "PodManifestConfig holds the necessary configuration options for using pod manifests",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "path",
        "fileCheckIntervalSeconds"
      ],
      "properties": {
        "fileCheckIntervalSeconds": {
          "description": "FileCheckIntervalSeconds is the interval in seconds for checking the manifest file(s) for new data The interval needs to be a positive value",
          "type": "integer",
          "format": "int64",
          "default": 0
        },
        "path": {
          "description": "Path specifies the path for the pod manifest file or directory If its a directory, its expected to contain on or more manifest files This is used by the Kubelet to create pods on the node",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    },
    "proxyArguments": {
      "description": "ProxyArguments are key value pairs that will be passed directly to the Proxy that match the Proxy's command line arguments.  These are not migrated or validated, so if you use them they may become invalid. These values override other settings in NodeConfig which may cause invalid configurations.",
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": {
        "type": [
          "array",
          "null"
        ],
        "items": {
          "type": [
            "string",
            "null"
          ],
          "default": ""
        }
      }
    },
    "servingInfo": {
      "description": "ServingInfo holds information about serving web pages",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "bindAddress",
        "bindNetwork",
        "certFile",
        "keyFile",
        "clientCA",
        "namedCertificates"
      ],
      "properties": {
        "bindAddress": {
          "description": "BindAddress is the ip:port to serve on",
          "type": "string",
          "default": ""
        },
        "bindNetwork": {
          "description": "BindNetwork is the type of network to bind to - defaults to \"tcp4\", accepts \"tcp\", \"tcp4\", and \"tcp6\"",
          "type": "string",
          "default": ""
        },
        "certFile": {
          "description": "CertFile is a file containing a PEM-encoded certificate",
          "type": "string",
          "default": ""
        },
        "cipherSuites": {
          "description": "CipherSuites contains an overridden list of ciphers for the server to support. Values must match cipher suite IDs from https://golang.org/pkg/crypto/tls/#pkg-constants",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "clientCA": {
          "description": "ClientCA is the certificate bundle for all the signers that you'll recognize for incoming client certificates",
          "type": "string",
          "default": ""
        },
        "keyFile": {
          "description": "KeyFile is a file containing a PEM-encoded private key for the certificate specified by CertFile",
          "type": "string",
          "default": ""
        },
        "minTLSVersion": {
          "description": "MinTLSVersion is the minimum TLS version supported. Values must match version names from https://golang.org/pkg/crypto/tls/#pkg-constants",
          "type": [
            "string",
            "null"
          ]
        },
        "namedCertificates": {
          "description": "NamedCertificates is a list of certificates to use to secure requests to specific hostnames",
          "type": "array",
          "items": {
            "description": "NamedCertificate specifies a certificate/key, and the names it should be served for",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "names",
              "certFile",
              "keyFile"
            ],
            "properties": {
              "certFile": {
                "description": "CertFile is a file containing a PEM-encoded certificate",
                "type": "string",
                "default": ""
              },
              "keyFile": {
                "description": "KeyFile is a file containing a PEM-encoded private key for the certificate specified by CertFile",
                "type": "string",
                "default": ""
              },
              "names": {
                "description": "Names is a list of DNS names this certificate should be used to secure A name can be a normal DNS name, or can contain leading wildcard segments.",
                "type": "array",
                "items": {
                  "type": [
                    "string",
                    "null"
                  ],
                  "default": ""
                }
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    },
    "volumeConfig": {
      "description": "NodeVolumeConfig contains options for configuring volumes on the node.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "localQuota"
      ],
      "properties": {
        "localQuota": {
          "description": "LocalQuota contains options for controlling local volume quota on the node.",
          "type": "object",
          "required": [
            "perFSGroup"
          ],
          "properties": {
            "perFSGroup": {
              "oneOf": [
                {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                {
                  "type": [
                    "number",
                    "null"
                  ]
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "volumeDirectory": {
      "description": "VolumeDirectory is the directory that volumes will be stored under",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    }
  },
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}