{
  "type": "object",
  "required": [
    "domain"
  ],
  "properties": {
    "appsDomain": {
      "description": "appsDomain is an optional domain to use instead of the one specified in the domain field when a Route is created without specifying an explicit host. If appsDomain is nonempty, this value is used to generate default host values for Route. Unlike domain, appsDomain may be modified after installation. This assumes a new ingresscontroller has been setup with a wildcard certificate.",
      "type": [
        "string",
        "null"
      ]
    },
    "componentRoutes": {
      "description": "componentRoutes is an optional list of routes that are managed by OpenShift components that a cluster-admin is able to configure the hostname and serving certificate for. The namespace and name of each route in this list should match an existing entry in the status.componentRoutes list.\n\nTo determine the set of configurable Routes, look at namespace and name of entries in the .status.componentRoutes list, where participating operators write the status of configurable routes.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "description": "ComponentRouteSpec allows for configuration of a route's hostname and serving certificate.",
        "type": [
          "object",
          "null"
        ],
        "required": [
          "namespace",
          "name",
          "hostname"
        ],
        "properties": {
          "hostname": {
            "description": "hostname is the hostname that should be used by the route.",
            "type": "string",
            "default": ""
          },
          "name": {
            "description": "name is the logical name of the route to customize.\n\nThe namespace and name of this componentRoute must match a corresponding entry in the list of status.componentRoutes if the route is to be customized.",
            "type": "string",
            "default": ""
          },
          "namespace": {
            "description": "namespace is the namespace of the route to customize.\n\nThe namespace and name of this componentRoute must match a corresponding entry in the list of status.componentRoutes if the route is to be customized.",
            "type": "string",
            "default": ""
          },
          "servingCertKeyPairSecret": {
            "description": "SecretNameReference references a secret in a specific namespace. The namespace must be specified at the point of use.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "name is the metadata.name of the referenced secret",
                "type": "string",
                "default": ""
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      "x-kubernetes-list-map-keys": [
        "namespace",
        "name"
      ],
      "x-kubernetes-list-type": "map"
    },
    "domain": {
      "description": "domain is used to generate a default host name for a route when the route's host name is empty. The generated host name will follow this pattern: \"<route-name>.<route-namespace>.<domain>\".\n\nIt is also used as the default wildcard domain suffix for ingress. The default ingresscontroller domain will follow this pattern: \"*.<domain>\".\n\nOnce set, changing domain is not currently supported.",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "loadBalancer": {
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "platform": {
          "description": "IngressPlatformSpec holds the desired state of Ingress specific to the underlying infrastructure provider of the current cluster. Since these are used at spec-level for the underlying cluster, it is supposed that only one of the spec structs is set.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "type"
          ],
          "properties": {
            "aws": {
              "description": "AWSIngressSpec holds the desired state of the Ingress for Amazon Web Services infrastructure provider. This only includes fields that can be modified in the cluster.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "type": {
                  "description": "type allows user to set a load balancer type. When this field is set the default ingresscontroller will get created using the specified LBType. If this field is not set then the default ingress controller of LBType Classic will be created. Valid values are:\n\n* \"Classic\": A Classic Load Balancer that makes routing decisions at either\n  the transport layer (TCP/SSL) or the application layer (HTTP/HTTPS). See\n  the following for additional details:\n\n    https://docs.aws.amazon.com/AmazonECS/latest/developerguide/load-balancer-types.html#clb\n\n* \"NLB\": A Network Load Balancer that makes routing decisions at the\n  transport layer (TCP/SSL). See the following for additional details:\n\n    https://docs.aws.amazon.com/AmazonECS/latest/developerguide/load-balancer-types.html#nlb",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "x-kubernetes-unions": [
                {
                  "discriminator": "type",
                  "fields-to-discriminateBy": {}
                }
              ],
              "additionalProperties": false
            },
            "type": {
              "description": "type is the underlying infrastructure provider for the cluster. Allowed values are \"AWS\", \"Azure\", \"BareMetal\", \"GCP\", \"Libvirt\", \"OpenStack\", \"VSphere\", \"oVirt\", \"KubeVirt\", \"EquinixMetal\", \"PowerVS\", \"AlibabaCloud\", \"Nutanix\" and \"None\". Individual components may not support all platforms, and must handle unrecognized platforms as None if they do not support that platform.",
              "type": "string",
              "default": ""
            }
          },
          "x-kubernetes-unions": [
            {
              "discriminator": "type",
              "fields-to-discriminateBy": {
                "aws": "AWS"
              }
            }
          ],
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "requiredHSTSPolicies": {
      "description": "requiredHSTSPolicies specifies HSTS policies that are required to be set on newly created  or updated routes matching the domainPattern/s and namespaceSelector/s that are specified in the policy. Each requiredHSTSPolicy must have at least a domainPattern and a maxAge to validate a route HSTS Policy route annotation, and affect route admission.\n\nA candidate route is checked for HSTS Policies if it has the HSTS Policy route annotation: \"haproxy.router.openshift.io/hsts_header\" E.g. haproxy.router.openshift.io/hsts_header: max-age=31536000;preload;includeSubDomains\n\n- For each candidate route, if it matches a requiredHSTSPolicy domainPattern and optional namespaceSelector, then the maxAge, preloadPolicy, and includeSubdomainsPolicy must be valid to be admitted.  Otherwise, the route is rejected. - The first match, by domainPattern and optional namespaceSelector, in the ordering of the RequiredHSTSPolicies determines the route's admission status. - If the candidate route doesn't match any requiredHSTSPolicy domainPattern and optional namespaceSelector, then it may use any HSTS Policy annotation.\n\nThe HSTS policy configuration may be changed after routes have already been created. An update to a previously admitted route may then fail if the updated route does not conform to the updated HSTS policy configuration. However, changing the HSTS policy configuration will not cause a route that is already admitted to stop working.\n\nNote that if there are no RequiredHSTSPolicies, any HSTS Policy annotation on the route is valid.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": [
          "object",
          "null"
        ],
        "required": [
          "domainPatterns",
          "maxAge"
        ],
        "properties": {
          "domainPatterns": {
            "description": "domainPatterns is a list of domains for which the desired HSTS annotations are required. If domainPatterns is specified and a route is created with a spec.host matching one of the domains, the route must specify the HSTS Policy components described in the matching RequiredHSTSPolicy.\n\nThe use of wildcards is allowed like this: *.foo.com matches everything under foo.com. foo.com only matches foo.com, so to cover foo.com and everything under it, you must specify *both*.",
            "type": "array",
            "items": {
              "type": [
                "string",
                "null"
              ],
              "default": ""
            }
          },
          "includeSubDomainsPolicy": {
            "description": "includeSubDomainsPolicy means the HSTS Policy should apply to any subdomains of the host's domain name.  Thus, for the host bar.foo.com, if includeSubDomainsPolicy was set to RequireIncludeSubDomains: - the host app.bar.foo.com would inherit the HSTS Policy of bar.foo.com - the host bar.foo.com would inherit the HSTS Policy of bar.foo.com - the host foo.com would NOT inherit the HSTS Policy of bar.foo.com - the host def.foo.com would NOT inherit the HSTS Policy of bar.foo.com",
            "type": [
              "string",
              "null"
            ]
          },
          "maxAge": {
            "description": "MaxAgePolicy contains a numeric range for specifying a compliant HSTS max-age for the enclosing RequiredHSTSPolicy",
            "type": "object",
            "properties": {
              "largestMaxAge": {
                "description": "The largest allowed value (in seconds) of the RequiredHSTSPolicy max-age This value can be left unspecified, in which case no upper limit is enforced.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int32"
              },
              "smallestMaxAge": {
                "description": "The smallest allowed value (in seconds) of the RequiredHSTSPolicy max-age Setting max-age=0 allows the deletion of an existing HSTS header from a host.  This is a necessary tool for administrators to quickly correct mistakes. This value can be left unspecified, in which case no lower limit is enforced.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int32"
              }
            },
            "additionalProperties": false
          },
          "namespaceSelector": {
            "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "matchExpressions": {
                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "key",
                    "operator"
                  ],
                  "properties": {
                    "key": {
                      "description": "key is the label key that the selector applies to.",
                      "type": "string",
                      "default": "",
                      "x-kubernetes-patch-merge-key": "key",
                      "x-kubernetes-patch-strategy": "merge"
                    },
                    "operator": {
                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                      "type": "string",
                      "default": ""
                    },
                    "values": {
                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "default": ""
                      }
                    }
                  },
                  "additionalProperties": false
                }
              },
              "matchLabels": {
                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ],
                  "default": ""
                }
              }
            },
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
          },
          "preloadPolicy": {
            "description": "preloadPolicy directs the client to include hosts in its host preload list so that it never needs to do an initial load to get the HSTS header (note that this is not defined in RFC 6797 and is therefore client implementation-dependent).",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      }
    }
  },
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}