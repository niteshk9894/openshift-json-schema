{
  "description": "ControlPlaneMachineSet ensures that a specified number of control plane machine replicas are running at any given time. Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ]
    },
    "metadata": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "creationTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "deletionTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          },
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": [
            "string",
            "null"
          ]
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "fieldsType": {
                "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                "type": [
                  "string",
                  "null"
                ]
              },
              "fieldsV1": {
                "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                "type": [
                  "object",
                  "null"
                ]
              },
              "manager": {
                "description": "Manager is an identifier of the workflow managing these fields.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "operation": {
                "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "subresource": {
                "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "time": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              }
            },
            "additionalProperties": false
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": [
            "string",
            "null"
          ]
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": [
            "string",
            "null"
          ]
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "apiVersion",
              "kind",
              "name",
              "uid"
            ],
            "properties": {
              "apiVersion": {
                "description": "API version of the referent.",
                "type": "string",
                "default": ""
              },
              "blockOwnerDeletion": {
                "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "controller": {
                "description": "If true, this reference points to the managing controller.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "kind": {
                "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string",
                "default": ""
              },
              "name": {
                "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                "type": "string",
                "default": ""
              },
              "uid": {
                "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                "type": "string",
                "default": ""
              }
            },
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": [
            "string",
            "null"
          ]
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": [
            "string",
            "null"
          ]
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "spec": {
      "description": "ControlPlaneMachineSet represents the configuration of the ControlPlaneMachineSet.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "replicas",
        "selector",
        "template"
      ],
      "properties": {
        "replicas": {
          "description": "Replicas defines how many Control Plane Machines should be created by this ControlPlaneMachineSet. This field is immutable and cannot be changed after cluster installation. The ControlPlaneMachineSet only operates with 3 or 5 node control planes, 3 and 5 are the only valid values for this field.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
          "type": "object",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "key",
                  "operator"
                ],
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string",
                    "default": "",
                    "x-kubernetes-patch-merge-key": "key",
                    "x-kubernetes-patch-strategy": "merge"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string",
                    "default": ""
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "default": ""
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": {
                "type": [
                  "string",
                  "null"
                ],
                "default": ""
              }
            }
          },
          "x-kubernetes-map-type": "atomic",
          "additionalProperties": false
        },
        "state": {
          "description": "State defines whether the ControlPlaneMachineSet is Active or Inactive. When Inactive, the ControlPlaneMachineSet will not take any action on the state of the Machines within the cluster. When Active, the ControlPlaneMachineSet will reconcile the Machines and will update the Machines as necessary. Once Active, a ControlPlaneMachineSet cannot be made Inactive. To prevent further action please remove the ControlPlaneMachineSet.",
          "type": [
            "string",
            "null"
          ],
          "default": "Inactive"
        },
        "strategy": {
          "description": "ControlPlaneMachineSetStrategy defines the strategy for applying updates to the Control Plane Machines managed by the ControlPlaneMachineSet.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "type": {
              "description": "Type defines the type of update strategy that should be used when updating Machines owned by the ControlPlaneMachineSet. Valid values are \"RollingUpdate\" and \"OnDelete\". The current default value is \"RollingUpdate\".",
              "type": [
                "string",
                "null"
              ],
              "default": "RollingUpdate"
            }
          },
          "additionalProperties": false
        },
        "template": {
          "description": "ControlPlaneMachineSetTemplate is a template used by the ControlPlaneMachineSet to create the Machines that it will manage in the future.",
          "type": "object",
          "properties": {
            "machineType": {
              "description": "MachineType determines the type of Machines that should be managed by the ControlPlaneMachineSet. Currently, the only valid value is machines_v1beta1_machine_openshift_io.",
              "type": [
                "string",
                "null"
              ]
            },
            "machines_v1beta1_machine_openshift_io": {
              "description": "OpenShiftMachineV1Beta1MachineTemplate is a template for the ControlPlaneMachineSet to create Machines from the v1beta1.machine.openshift.io API group.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "metadata",
                "spec"
              ],
              "properties": {
                "failureDomains": {
                  "description": "FailureDomain represents the different configurations required to spread Machines across failure domains on different platforms.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "platform"
                  ],
                  "properties": {
                    "aws": {
                      "description": "AWS configures failure domain information for the AWS platform.",
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "description": "AWSFailureDomain configures failure domain information for the AWS platform.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "placement": {
                            "description": "AWSFailureDomainPlacement configures the placement information for the AWSFailureDomain.",
                            "type": [
                              "object",
                              "null"
                            ],
                            "required": [
                              "availabilityZone"
                            ],
                            "properties": {
                              "availabilityZone": {
                                "description": "AvailabilityZone is the availability zone of the instance.",
                                "type": "string",
                                "default": ""
                              }
                            },
                            "additionalProperties": false
                          },
                          "subnet": {
                            "description": "AWSResourceReference is a reference to a specific AWS resource by ID, ARN, or filters. Only one of ID, ARN or Filters may be specified. Specifying more than one will result in a validation error.",
                            "type": [
                              "object",
                              "null"
                            ],
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "arn": {
                                "description": "ARN of resource.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "filters": {
                                "description": "Filters is a set of filters used to identify a resource.",
                                "type": [
                                  "array",
                                  "null"
                                ],
                                "items": {
                                  "description": "AWSResourceFilter is a filter used to identify an AWS resource",
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "Name of the filter. Filter names are case-sensitive.",
                                      "type": "string",
                                      "default": ""
                                    },
                                    "values": {
                                      "description": "Values includes one or more filter values. Filter values are case-sensitive.",
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "default": ""
                                      }
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "id": {
                                "description": "ID of resource.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "type": {
                                "description": "Type determines how the reference will fetch the AWS resource.",
                                "type": "string",
                                "default": ""
                              }
                            },
                            "x-kubernetes-unions": [
                              {
                                "discriminator": "type",
                                "fields-to-discriminateBy": {
                                  "arn": "ARN",
                                  "filters": "Filters",
                                  "id": "ID"
                                }
                              }
                            ],
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "azure": {
                      "description": "Azure configures failure domain information for the Azure platform.",
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "description": "AzureFailureDomain configures failure domain information for the Azure platform.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "zone"
                        ],
                        "properties": {
                          "zone": {
                            "description": "Availability Zone for the virtual machine. If nil, the virtual machine should be deployed to no zone.",
                            "type": "string",
                            "default": ""
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "gcp": {
                      "description": "GCP configures failure domain information for the GCP platform.",
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "description": "GCPFailureDomain configures failure domain information for the GCP platform",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "zone"
                        ],
                        "properties": {
                          "zone": {
                            "description": "Zone is the zone in which the GCP machine provider will create the VM.",
                            "type": "string",
                            "default": ""
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "platform": {
                      "description": "Platform identifies the platform for which the FailureDomain represents. Currently supported values are AWS, Azure, and GCP.",
                      "type": "string",
                      "default": ""
                    }
                  },
                  "x-kubernetes-unions": [
                    {
                      "discriminator": "platform",
                      "fields-to-discriminateBy": {
                        "aws": "AWS",
                        "azure": "Azure",
                        "gcp": "GCP"
                      }
                    }
                  ],
                  "additionalProperties": false
                },
                "metadata": {
                  "description": "ControlPlaneMachineSetTemplateObjectMeta is a subset of the metav1.ObjectMeta struct. It allows users to specify labels and annotations that will be copied onto Machines created from this template.",
                  "type": "object",
                  "required": [
                    "labels"
                  ],
                  "properties": {
                    "annotations": {
                      "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "default": ""
                      }
                    },
                    "labels": {
                      "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels. This field must contain both the 'machine.openshift.io/cluster-api-machine-role' and 'machine.openshift.io/cluster-api-machine-type' labels, both with a value of 'master'. It must also contain a label with the key 'machine.openshift.io/cluster-api-cluster'.",
                      "type": "object",
                      "additionalProperties": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "default": ""
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "spec": {
                  "description": "MachineSpec defines the desired state of Machine",
                  "type": "object",
                  "properties": {
                    "lifecycleHooks": {
                      "description": "LifecycleHooks allow users to pause operations on the machine at certain prefedined points within the machine lifecycle.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "preDrain": {
                          "description": "PreDrain hooks prevent the machine from being drained. This also blocks further lifecycle events, such as termination.",
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "description": "LifecycleHook represents a single instance of a lifecycle hook",
                            "type": [
                              "object",
                              "null"
                            ],
                            "required": [
                              "name",
                              "owner"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name defines a unique name for the lifcycle hook. The name should be unique and descriptive, ideally 1-3 words, in CamelCase or it may be namespaced, eg. foo.example.com/CamelCase. Names must be unique and should only be managed by a single entity.",
                                "type": "string",
                                "default": ""
                              },
                              "owner": {
                                "description": "Owner defines the owner of the lifecycle hook. This should be descriptive enough so that users can identify who/what is responsible for blocking the lifecycle. This could be the name of a controller (e.g. clusteroperator/etcd) or an administrator managing the hook.",
                                "type": "string",
                                "default": ""
                              }
                            },
                            "additionalProperties": false
                          },
                          "x-kubernetes-list-map-keys": [
                            "name"
                          ],
                          "x-kubernetes-list-type": "map"
                        },
                        "preTerminate": {
                          "description": "PreTerminate hooks prevent the machine from being terminated. PreTerminate hooks be actioned after the Machine has been drained.",
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "description": "LifecycleHook represents a single instance of a lifecycle hook",
                            "type": [
                              "object",
                              "null"
                            ],
                            "required": [
                              "name",
                              "owner"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name defines a unique name for the lifcycle hook. The name should be unique and descriptive, ideally 1-3 words, in CamelCase or it may be namespaced, eg. foo.example.com/CamelCase. Names must be unique and should only be managed by a single entity.",
                                "type": "string",
                                "default": ""
                              },
                              "owner": {
                                "description": "Owner defines the owner of the lifecycle hook. This should be descriptive enough so that users can identify who/what is responsible for blocking the lifecycle. This could be the name of a controller (e.g. clusteroperator/etcd) or an administrator managing the hook.",
                                "type": "string",
                                "default": ""
                              }
                            },
                            "additionalProperties": false
                          },
                          "x-kubernetes-list-map-keys": [
                            "name"
                          ],
                          "x-kubernetes-list-type": "map"
                        }
                      },
                      "additionalProperties": false
                    },
                    "metadata": {
                      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create. This is a copy of customizable fields from metav1.ObjectMeta.\n\nObjectMeta is embedded in `Machine.Spec`, `MachineDeployment.Template` and `MachineSet.Template`, which are not top-level Kubernetes objects. Given that metav1.ObjectMeta has lots of special cases and read-only fields which end up in the generated CRD validation, having it as a subset simplifies the API and some issues that can impact user experience.\n\nDuring the [upgrade to controller-tools@v2](https://github.com/kubernetes-sigs/cluster-api/pull/1054) for v1alpha2, we noticed a failure would occur running Cluster API test suite against the new CRDs, specifically `spec.metadata.creationTimestamp in body must be of type string: \"null\"`. The investigation showed that `controller-tools@v2` behaves differently than its previous version when handling types from [metav1](k8s.io/apimachinery/pkg/apis/meta/v1) package.\n\nIn more details, we found that embedded (non-top level) types that embedded `metav1.ObjectMeta` had validation properties, including for `creationTimestamp` (metav1.Time). The `metav1.Time` type specifies a custom json marshaller that, when IsZero() is true, returns `null` which breaks validation because the field isn't marked as nullable.\n\nIn future versions, controller-tools@v2 might allow overriding the type and validation for embedded types. When that happens, this hack should be revisited.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "annotations": {
                          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                          "type": [
                            "object",
                            "null"
                          ],
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "default": ""
                          }
                        },
                        "generateName": {
                          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "labels": {
                          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                          "type": [
                            "object",
                            "null"
                          ],
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "default": ""
                          }
                        },
                        "name": {
                          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "namespace": {
                          "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "ownerReferences": {
                          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                            "type": [
                              "object",
                              "null"
                            ],
                            "required": [
                              "apiVersion",
                              "kind",
                              "name",
                              "uid"
                            ],
                            "properties": {
                              "apiVersion": {
                                "description": "API version of the referent.",
                                "type": "string",
                                "default": ""
                              },
                              "blockOwnerDeletion": {
                                "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                                "type": [
                                  "boolean",
                                  "null"
                                ]
                              },
                              "controller": {
                                "description": "If true, this reference points to the managing controller.",
                                "type": [
                                  "boolean",
                                  "null"
                                ]
                              },
                              "kind": {
                                "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                "type": "string",
                                "default": ""
                              },
                              "name": {
                                "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                                "type": "string",
                                "default": ""
                              },
                              "uid": {
                                "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                                "type": "string",
                                "default": ""
                              }
                            },
                            "x-kubernetes-map-type": "atomic",
                            "additionalProperties": false
                          },
                          "x-kubernetes-patch-merge-key": "uid",
                          "x-kubernetes-patch-strategy": "merge"
                        }
                      },
                      "additionalProperties": false
                    },
                    "providerID": {
                      "description": "ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "providerSpec": {
                      "description": "ProviderSpec defines the configuration to use during node creation.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "value": {
                          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\":\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
                          "type": [
                            "object",
                            "null"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "taints": {
                      "description": "The list of the taints to be applied to the corresponding Node in additive manner. This list will not overwrite any other taints added to the Node on an ongoing basis by other entities. These taints should be actively reconciled e.g. if you ask the machine controller to apply a taint and then manually remove the taint the machine controller will put it back) but not have the machine controller remove any taints",
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "description": "The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "key",
                          "effect"
                        ],
                        "properties": {
                          "effect": {
                            "description": "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\n\nPossible enum values:\n - `\"NoExecute\"` Evict any already-running pods that do not tolerate the taint. Currently enforced by NodeController.\n - `\"NoSchedule\"` Do not allow new pods to schedule onto the node unless they tolerate the taint, but allow all pods submitted to Kubelet without going through the scheduler to start, and allow all already-running pods to continue running. Enforced by the scheduler.\n - `\"PreferNoSchedule\"` Like TaintEffectNoSchedule, but the scheduler tries not to schedule new pods onto the node, rather than prohibiting new pods from scheduling onto the node entirely. Enforced by the scheduler.",
                            "type": "string",
                            "default": "",
                            "enum": [
                              "NoExecute",
                              "NoSchedule",
                              "PreferNoSchedule"
                            ]
                          },
                          "key": {
                            "description": "Required. The taint key to be applied to a node.",
                            "type": "string",
                            "default": ""
                          },
                          "timeAdded": {
                            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                            "type": [
                              "string",
                              "null"
                            ],
                            "format": "date-time"
                          },
                          "value": {
                            "description": "The taint value corresponding to the taint key.",
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "x-kubernetes-unions": [
            {
              "discriminator": "machineType",
              "fields-to-discriminateBy": {
                "machines_v1beta1_machine_openshift_io": "OpenShiftMachineV1Beta1Machine"
              }
            }
          ],
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ControlPlaneMachineSetStatus represents the status of the ControlPlaneMachineSet CRD.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represents the observations of the ControlPlaneMachineSet's current state. Known .status.conditions.type are: Available, Degraded and Progressing.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "type",
              "status",
              "lastTransitionTime",
              "reason",
              "message"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                "type": "string",
                "default": ""
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64"
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                "type": "string",
                "default": ""
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "default": ""
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "type": "string",
                "default": ""
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the most recent generation observed for this ControlPlaneMachineSet. It corresponds to the ControlPlaneMachineSets's generation, which is updated on mutation by the API Server.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "readyReplicas": {
          "description": "ReadyReplicas is the number of Control Plane Machines created by the ControlPlaneMachineSet controller which are ready. Note that this value may be higher than the desired number of replicas while rolling updates are in-progress.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "replicas": {
          "description": "Replicas is the number of Control Plane Machines created by the ControlPlaneMachineSet controller. Note that during update operations this value may differ from the desired replica count.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "unavailableReplicas": {
          "description": "UnavailableReplicas is the number of Control Plane Machines that are still required before the ControlPlaneMachineSet reaches the desired available capacity. When this value is non-zero, the number of ReadyReplicas is less than the desired Replicas.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "updatedReplicas": {
          "description": "UpdatedReplicas is the number of non-terminated Control Plane Machines created by the ControlPlaneMachineSet controller that have the desired provider spec and are ready. This value is set to 0 when a change is detected to the desired spec. When the update strategy is RollingUpdate, this will also coincide with starting the process of updating the Machines. When the update strategy is OnDelete, this value will remain at 0 until a user deletes an existing replica and its replacement has become ready.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        }
      },
      "additionalProperties": false
    }
  },
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}