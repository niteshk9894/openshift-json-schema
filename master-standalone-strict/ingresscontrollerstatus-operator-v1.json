{
  "description": "IngressControllerStatus defines the observed status of the IngressController.",
  "type": "object",
  "required": [
    "availableReplicas",
    "selector",
    "domain"
  ],
  "properties": {
    "availableReplicas": {
      "description": "availableReplicas is number of observed available replicas according to the ingress controller deployment.",
      "type": [
        "integer",
        "null"
      ],
      "format": "int32",
      "default": 0
    },
    "conditions": {
      "description": "conditions is a list of conditions and their status.\n\nAvailable means the ingress controller deployment is available and servicing route and ingress resources (i.e, .status.availableReplicas equals .spec.replicas)\n\nThere are additional conditions which indicate the status of other ingress controller features and capabilities.\n\n  * LoadBalancerManaged\n  - True if the following conditions are met:\n    * The endpoint publishing strategy requires a service load balancer.\n  - False if any of those conditions are unsatisfied.\n\n  * LoadBalancerReady\n  - True if the following conditions are met:\n    * A load balancer is managed.\n    * The load balancer is ready.\n  - False if any of those conditions are unsatisfied.\n\n  * DNSManaged\n  - True if the following conditions are met:\n    * The endpoint publishing strategy and platform support DNS.\n    * The ingress controller domain is set.\n    * dns.config.openshift.io/cluster configures DNS zones.\n  - False if any of those conditions are unsatisfied.\n\n  * DNSReady\n  - True if the following conditions are met:\n    * DNS is managed.\n    * DNS records have been successfully created.\n  - False if any of those conditions are unsatisfied.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "description": "OperatorCondition is just the standard condition fields.",
        "type": [
          "object",
          "null"
        ],
        "required": [
          "type",
          "status"
        ],
        "properties": {
          "lastTransitionTime": {
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "message": {
            "type": [
              "string",
              "null"
            ]
          },
          "reason": {
            "type": [
              "string",
              "null"
            ]
          },
          "status": {
            "type": "string",
            "default": ""
          },
          "type": {
            "type": "string",
            "default": ""
          }
        },
        "additionalProperties": false
      }
    },
    "domain": {
      "description": "domain is the actual domain in use.",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "endpointPublishingStrategy": {
      "description": "EndpointPublishingStrategy is a way to publish the endpoints of an IngressController, and represents the type and any additional configuration for a specific type.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "type"
      ],
      "properties": {
        "hostNetwork": {
          "description": "HostNetworkStrategy holds parameters for the HostNetwork endpoint publishing strategy.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "httpPort": {
              "description": "httpPort is the port on the host which should be used to listen for HTTP requests. This field should be set when port 80 is already in use. The value should not coincide with the NodePort range of the cluster. When the value is 0 or is not specified it defaults to 80.",
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "httpsPort": {
              "description": "httpsPort is the port on the host which should be used to listen for HTTPS requests. This field should be set when port 443 is already in use. The value should not coincide with the NodePort range of the cluster. When the value is 0 or is not specified it defaults to 443.",
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "protocol": {
              "description": "protocol specifies whether the IngressController expects incoming connections to use plain TCP or whether the IngressController expects PROXY protocol.\n\nPROXY protocol can be used with load balancers that support it to communicate the source addresses of client connections when forwarding those connections to the IngressController.  Using PROXY protocol enables the IngressController to report those source addresses instead of reporting the load balancer's address in HTTP headers and logs.  Note that enabling PROXY protocol on the IngressController will cause connections to fail if you are not using a load balancer that uses PROXY protocol to forward connections to the IngressController.  See http://www.haproxy.org/download/2.2/doc/proxy-protocol.txt for information about PROXY protocol.\n\nThe following values are valid for this field:\n\n* The empty string. * \"TCP\". * \"PROXY\".\n\nThe empty string specifies the default, which is TCP without PROXY protocol.  Note that the default is subject to change.",
              "type": [
                "string",
                "null"
              ]
            },
            "statsPort": {
              "description": "statsPort is the port on the host where the stats from the router are published. The value should not coincide with the NodePort range of the cluster. If an external load balancer is configured to forward connections to this IngressController, the load balancer should use this port for health checks. The load balancer can send HTTP probes on this port on a given node, with the path /healthz/ready to determine if the ingress controller is ready to receive traffic on the node. For proper operation the load balancer must not forward traffic to a node until the health check reports ready. The load balancer should also stop forwarding requests within a maximum of 45 seconds after /healthz/ready starts reporting not-ready. Probing every 5 to 10 seconds, with a 5-second timeout and with a threshold of two successful or failed requests to become healthy or unhealthy respectively, are well-tested values. When the value is 0 or is not specified it defaults to 1936.",
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "loadBalancer": {
          "description": "LoadBalancerStrategy holds parameters for a load balancer.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "scope"
          ],
          "properties": {
            "allowedSourceRanges": {
              "description": "allowedSourceRanges specifies an allowlist of IP address ranges to which access to the load balancer should be restricted.  Each range must be specified using CIDR notation (e.g. \"10.0.0.0/8\" or \"fd00::/8\"). If no range is specified, \"0.0.0.0/0\" for IPv4 and \"::/0\" for IPv6 are used by default, which allows all source addresses.\n\nTo facilitate migration from earlier versions of OpenShift that did not have the allowedSourceRanges field, you may set the service.beta.kubernetes.io/load-balancer-source-ranges annotation on the \"router-<ingresscontroller name>\" service in the \"openshift-ingress\" namespace, and this annotation will take effect if allowedSourceRanges is empty on OpenShift 4.12.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ],
                "default": ""
              }
            },
            "dnsManagementPolicy": {
              "description": "dnsManagementPolicy indicates if the lifecycle of the wildcard DNS record associated with the load balancer service will be managed by the ingress operator. It defaults to Managed. Valid values are: Managed and Unmanaged.",
              "type": [
                "string",
                "null"
              ],
              "default": "Managed"
            },
            "providerParameters": {
              "description": "ProviderLoadBalancerParameters holds desired load balancer information specific to the underlying infrastructure provider.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "type"
              ],
              "properties": {
                "aws": {
                  "description": "AWSLoadBalancerParameters provides configuration settings that are specific to AWS load balancers.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "classicLoadBalancer": {
                      "description": "AWSClassicLoadBalancerParameters holds configuration parameters for an AWS Classic load balancer.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "connectionIdleTimeout": {
                          "description": "Duration is a wrapper around time.Duration which supports correct marshaling to YAML and JSON. In particular, it marshals into strings, which can be used as map keys in json.",
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "networkLoadBalancer": {
                      "description": "AWSNetworkLoadBalancerParameters holds configuration parameters for an AWS Network load balancer.",
                      "type": [
                        "object",
                        "null"
                      ]
                    },
                    "type": {
                      "description": "type is the type of AWS load balancer to instantiate for an ingresscontroller.\n\nValid values are:\n\n* \"Classic\": A Classic Load Balancer that makes routing decisions at either\n  the transport layer (TCP/SSL) or the application layer (HTTP/HTTPS). See\n  the following for additional details:\n\n    https://docs.aws.amazon.com/AmazonECS/latest/developerguide/load-balancer-types.html#clb\n\n* \"NLB\": A Network Load Balancer that makes routing decisions at the\n  transport layer (TCP/SSL). See the following for additional details:\n\n    https://docs.aws.amazon.com/AmazonECS/latest/developerguide/load-balancer-types.html#nlb",
                      "type": "string",
                      "default": ""
                    }
                  },
                  "x-kubernetes-unions": [
                    {
                      "discriminator": "type",
                      "fields-to-discriminateBy": {
                        "classicLoadBalancer": "ClassicLoadBalancerParameters",
                        "networkLoadBalancer": "NetworkLoadBalancerParameters"
                      }
                    }
                  ],
                  "additionalProperties": false
                },
                "gcp": {
                  "description": "GCPLoadBalancerParameters provides configuration settings that are specific to GCP load balancers.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "clientAccess": {
                      "description": "clientAccess describes how client access is restricted for internal load balancers.\n\nValid values are: * \"Global\": Specifying an internal load balancer with Global client access\n  allows clients from any region within the VPC to communicate with the load\n  balancer.\n\n    https://cloud.google.com/kubernetes-engine/docs/how-to/internal-load-balancing#global_access\n\n* \"Local\": Specifying an internal load balancer with Local client access\n  means only clients within the same region (and VPC) as the GCP load balancer\n  can communicate with the load balancer. Note that this is the default behavior.\n\n    https://cloud.google.com/load-balancing/docs/internal#client_access",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "type": {
                  "description": "type is the underlying infrastructure provider for the load balancer. Allowed values are \"AWS\", \"Azure\", \"BareMetal\", \"GCP\", \"Nutanix\", \"OpenStack\", and \"VSphere\".",
                  "type": "string",
                  "default": ""
                }
              },
              "x-kubernetes-unions": [
                {
                  "discriminator": "type",
                  "fields-to-discriminateBy": {
                    "aws": "AWS",
                    "gcp": "GCP"
                  }
                }
              ],
              "additionalProperties": false
            },
            "scope": {
              "description": "scope indicates the scope at which the load balancer is exposed. Possible values are \"External\" and \"Internal\".",
              "type": "string",
              "default": ""
            }
          },
          "additionalProperties": false
        },
        "nodePort": {
          "description": "NodePortStrategy holds parameters for the NodePortService endpoint publishing strategy.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "protocol": {
              "description": "protocol specifies whether the IngressController expects incoming connections to use plain TCP or whether the IngressController expects PROXY protocol.\n\nPROXY protocol can be used with load balancers that support it to communicate the source addresses of client connections when forwarding those connections to the IngressController.  Using PROXY protocol enables the IngressController to report those source addresses instead of reporting the load balancer's address in HTTP headers and logs.  Note that enabling PROXY protocol on the IngressController will cause connections to fail if you are not using a load balancer that uses PROXY protocol to forward connections to the IngressController.  See http://www.haproxy.org/download/2.2/doc/proxy-protocol.txt for information about PROXY protocol.\n\nThe following values are valid for this field:\n\n* The empty string. * \"TCP\". * \"PROXY\".\n\nThe empty string specifies the default, which is TCP without PROXY protocol.  Note that the default is subject to change.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "private": {
          "description": "PrivateStrategy holds parameters for the Private endpoint publishing strategy.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "protocol": {
              "description": "protocol specifies whether the IngressController expects incoming connections to use plain TCP or whether the IngressController expects PROXY protocol.\n\nPROXY protocol can be used with load balancers that support it to communicate the source addresses of client connections when forwarding those connections to the IngressController.  Using PROXY protocol enables the IngressController to report those source addresses instead of reporting the load balancer's address in HTTP headers and logs.  Note that enabling PROXY protocol on the IngressController will cause connections to fail if you are not using a load balancer that uses PROXY protocol to forward connections to the IngressController.  See http://www.haproxy.org/download/2.2/doc/proxy-protocol.txt for information about PROXY protocol.\n\nThe following values are valid for this field:\n\n* The empty string. * \"TCP\". * \"PROXY\".\n\nThe empty string specifies the default, which is TCP without PROXY protocol.  Note that the default is subject to change.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "type": {
          "description": "type is the publishing strategy to use. Valid values are:\n\n* LoadBalancerService\n\nPublishes the ingress controller using a Kubernetes LoadBalancer Service.\n\nIn this configuration, the ingress controller deployment uses container networking. A LoadBalancer Service is created to publish the deployment.\n\nSee: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer\n\nIf domain is set, a wildcard DNS record will be managed to point at the LoadBalancer Service's external name. DNS records are managed only in DNS zones defined by dns.config.openshift.io/cluster .spec.publicZone and .spec.privateZone.\n\nWildcard DNS management is currently supported only on the AWS, Azure, and GCP platforms.\n\n* HostNetwork\n\nPublishes the ingress controller on node ports where the ingress controller is deployed.\n\nIn this configuration, the ingress controller deployment uses host networking, bound to node ports 80 and 443. The user is responsible for configuring an external load balancer to publish the ingress controller via the node ports.\n\n* Private\n\nDoes not publish the ingress controller.\n\nIn this configuration, the ingress controller deployment uses container networking, and is not explicitly published. The user must manually publish the ingress controller.\n\n* NodePortService\n\nPublishes the ingress controller using a Kubernetes NodePort Service.\n\nIn this configuration, the ingress controller deployment uses container networking. A NodePort Service is created to publish the deployment. The specific node ports are dynamically allocated by OpenShift; however, to support static port allocations, user changes to the node port field of the managed NodePort Service will preserved.",
          "type": "string",
          "default": ""
        }
      },
      "x-kubernetes-unions": [
        {
          "discriminator": "type",
          "fields-to-discriminateBy": {
            "hostNetwork": "HostNetwork",
            "loadBalancer": "LoadBalancer",
            "nodePort": "NodePort",
            "private": "Private"
          }
        }
      ],
      "additionalProperties": false
    },
    "namespaceSelector": {
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "matchExpressions": {
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "key",
              "operator"
            ],
            "properties": {
              "key": {
                "description": "key is the label key that the selector applies to.",
                "type": "string",
                "default": "",
                "x-kubernetes-patch-merge-key": "key",
                "x-kubernetes-patch-strategy": "merge"
              },
              "operator": {
                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                "type": "string",
                "default": ""
              },
              "values": {
                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": [
                    "string",
                    "null"
                  ],
                  "default": ""
                }
              }
            },
            "additionalProperties": false
          }
        },
        "matchLabels": {
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        }
      },
      "x-kubernetes-map-type": "atomic",
      "additionalProperties": false
    },
    "observedGeneration": {
      "description": "observedGeneration is the most recent generation observed.",
      "type": [
        "integer",
        "null"
      ],
      "format": "int64"
    },
    "routeSelector": {
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "matchExpressions": {
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "key",
              "operator"
            ],
            "properties": {
              "key": {
                "description": "key is the label key that the selector applies to.",
                "type": "string",
                "default": "",
                "x-kubernetes-patch-merge-key": "key",
                "x-kubernetes-patch-strategy": "merge"
              },
              "operator": {
                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                "type": "string",
                "default": ""
              },
              "values": {
                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": [
                    "string",
                    "null"
                  ],
                  "default": ""
                }
              }
            },
            "additionalProperties": false
          }
        },
        "matchLabels": {
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        }
      },
      "x-kubernetes-map-type": "atomic",
      "additionalProperties": false
    },
    "selector": {
      "description": "selector is a label selector, in string format, for ingress controller pods corresponding to the IngressController. The number of matching pods should equal the value of availableReplicas.",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "tlsProfile": {
      "description": "TLSProfileSpec is the desired behavior of a TLSSecurityProfile.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "ciphers",
        "minTLSVersion"
      ],
      "properties": {
        "ciphers": {
          "description": "ciphers is used to specify the cipher algorithms that are negotiated during the TLS handshake.  Operators may remove entries their operands do not support.  For example, to use DES-CBC3-SHA  (yaml):\n\n  ciphers:\n    - DES-CBC3-SHA",
          "type": "array",
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "minTLSVersion": {
          "description": "minTLSVersion is used to specify the minimal version of the TLS protocol that is negotiated during the TLS handshake. For example, to use TLS versions 1.1, 1.2 and 1.3 (yaml):\n\n  minTLSVersion: TLSv1.1\n\nNOTE: currently the highest minTLSVersion allowed is VersionTLS12",
          "type": "string",
          "default": ""
        }
      },
      "additionalProperties": false
    }
  },
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}