{
  "description": "Console provides a means to configure an operator to manage the console.\n\nCompatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ]
    },
    "metadata": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "creationTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "deletionTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          },
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": [
            "string",
            "null"
          ]
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "fieldsType": {
                "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                "type": [
                  "string",
                  "null"
                ]
              },
              "fieldsV1": {
                "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                "type": [
                  "object",
                  "null"
                ]
              },
              "manager": {
                "description": "Manager is an identifier of the workflow managing these fields.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "operation": {
                "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "subresource": {
                "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "time": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              }
            },
            "additionalProperties": false
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": [
            "string",
            "null"
          ]
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": [
            "string",
            "null"
          ]
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "apiVersion",
              "kind",
              "name",
              "uid"
            ],
            "properties": {
              "apiVersion": {
                "description": "API version of the referent.",
                "type": "string",
                "default": ""
              },
              "blockOwnerDeletion": {
                "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "controller": {
                "description": "If true, this reference points to the managing controller.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "kind": {
                "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string",
                "default": ""
              },
              "name": {
                "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                "type": "string",
                "default": ""
              },
              "uid": {
                "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                "type": "string",
                "default": ""
              }
            },
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": [
            "string",
            "null"
          ]
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": [
            "string",
            "null"
          ]
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "spec": {
      "description": "ConsoleSpec is the specification of the desired behavior of the Console.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "managementState",
        "providers"
      ],
      "properties": {
        "customization": {
          "description": "ConsoleCustomization defines a list of optional configuration for the console UI.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "addPage": {
              "description": "AddPage allows customizing actions on the Add page in developer perspective.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "disabledActions": {
                  "description": "disabledActions is a list of actions that are not shown to users. Each action in the list is represented by its ID.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "default": ""
                  }
                }
              },
              "additionalProperties": false
            },
            "brand": {
              "description": "brand is the default branding of the web console which can be overridden by providing the brand field.  There is a limited set of specific brand options. This field controls elements of the console such as the logo. Invalid value will prevent a console rollout.",
              "type": [
                "string",
                "null"
              ]
            },
            "customLogoFile": {
              "description": "ConfigMapFileReference references a config map in a specific namespace. The namespace must be specified at the point of use.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "name"
              ],
              "properties": {
                "key": {
                  "description": "Key allows pointing to a specific key/value inside of the configmap.  This is useful for logical file references.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "name": {
                  "type": "string",
                  "default": ""
                }
              },
              "additionalProperties": false
            },
            "customProductName": {
              "description": "customProductName is the name that will be displayed in page titles, logo alt text, and the about dialog instead of the normal OpenShift product name.",
              "type": [
                "string",
                "null"
              ]
            },
            "developerCatalog": {
              "description": "DeveloperConsoleCatalogCustomization allow cluster admin to configure developer catalog.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "categories": {
                  "description": "categories which are shown in the developer catalog.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "DeveloperConsoleCatalogCategory for the developer console catalog.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "id",
                      "label"
                    ],
                    "properties": {
                      "id": {
                        "description": "ID is an identifier used in the URL to enable deep linking in console. ID is required and must have 1-32 URL safe (A-Z, a-z, 0-9, - and _) characters.",
                        "type": "string",
                        "default": ""
                      },
                      "label": {
                        "description": "label defines a category display label. It is required and must have 1-64 characters.",
                        "type": "string",
                        "default": ""
                      },
                      "subcategories": {
                        "description": "subcategories defines a list of child categories.",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "description": "DeveloperConsoleCatalogCategoryMeta are the key identifiers of a developer catalog category.",
                          "type": [
                            "object",
                            "null"
                          ],
                          "required": [
                            "id",
                            "label"
                          ],
                          "properties": {
                            "id": {
                              "description": "ID is an identifier used in the URL to enable deep linking in console. ID is required and must have 1-32 URL safe (A-Z, a-z, 0-9, - and _) characters.",
                              "type": "string",
                              "default": ""
                            },
                            "label": {
                              "description": "label defines a category display label. It is required and must have 1-64 characters.",
                              "type": "string",
                              "default": ""
                            },
                            "tags": {
                              "description": "tags is a list of strings that will match the category. A selected category show all items which has at least one overlapping tag between category and item.",
                              "type": [
                                "array",
                                "null"
                              ],
                              "items": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "default": ""
                              }
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "tags": {
                        "description": "tags is a list of strings that will match the category. A selected category show all items which has at least one overlapping tag between category and item.",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "default": ""
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "types": {
                  "description": "DeveloperConsoleCatalogTypes defines the state of the sub-catalog types.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "disabled": {
                      "description": "disabled is a list of developer catalog types (sub-catalogs IDs) that are not shown to users. Types (sub-catalogs) are added via console plugins, the available types (sub-catalog IDs) are available in the console on the cluster configuration page, or when editing the YAML in the console. Example: \"Devfile\", \"HelmChart\", \"BuilderImage\" If the list is empty or all the available sub-catalog types are added, then the complete developer catalog should be hidden.",
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "default": ""
                      },
                      "x-kubernetes-list-type": "set"
                    },
                    "enabled": {
                      "description": "enabled is a list of developer catalog types (sub-catalogs IDs) that will be shown to users. Types (sub-catalogs) are added via console plugins, the available types (sub-catalog IDs) are available in the console on the cluster configuration page, or when editing the YAML in the console. Example: \"Devfile\", \"HelmChart\", \"BuilderImage\" If the list is non-empty, a new type will not be shown to the user until it is added to list. If the list is empty the complete developer catalog will be shown.",
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "default": ""
                      },
                      "x-kubernetes-list-type": "set"
                    },
                    "state": {
                      "description": "state defines if a list of catalog types should be enabled or disabled.",
                      "type": [
                        "string",
                        "null"
                      ],
                      "default": "Enabled"
                    }
                  },
                  "x-kubernetes-unions": [
                    {
                      "discriminator": "state",
                      "fields-to-discriminateBy": {
                        "disabled": "Disabled",
                        "enabled": "Enabled"
                      }
                    }
                  ],
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "documentationBaseURL": {
              "description": "documentationBaseURL links to external documentation are shown in various sections of the web console.  Providing documentationBaseURL will override the default documentation URL. Invalid value will prevent a console rollout.",
              "type": [
                "string",
                "null"
              ]
            },
            "perspectives": {
              "description": "perspectives allows enabling/disabling of perspective(s) that user can see in the Perspective switcher dropdown.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "id",
                  "visibility"
                ],
                "properties": {
                  "id": {
                    "description": "id defines the id of the perspective. Example: \"dev\", \"admin\". The available perspective ids can be found in the code snippet section next to the yaml editor. Incorrect or unknown ids will be ignored.",
                    "type": "string",
                    "default": ""
                  },
                  "visibility": {
                    "description": "PerspectiveVisibility defines the criteria to show/hide a perspective",
                    "type": "object",
                    "required": [
                      "state"
                    ],
                    "properties": {
                      "accessReview": {
                        "description": "ResourceAttributesAccessReview defines the visibility of the perspective depending on the access review checks. `required` and  `missing` can work together esp. in the case where the cluster admin wants to show another perspective to users without specific permissions. Out of `required` and `missing` atleast one property should be non-empty.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "missing": {
                            "description": "missing defines a list of permission checks. The perspective will only be shown when at least one check fails. When omitted, the access review is skipped and the perspective will not be shown unless it is required to do so based on the configuration of the required access review list.",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "description": "ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface",
                              "type": "object",
                              "properties": {
                                "group": {
                                  "description": "Group is the API Group of the Resource.  \"*\" means all.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "name": {
                                  "description": "Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "namespace": {
                                  "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "resource": {
                                  "description": "Resource is one of the existing resource types.  \"*\" means all.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "subresource": {
                                  "description": "Subresource is one of the existing resource types.  \"\" means none.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "verb": {
                                  "description": "Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "version": {
                                  "description": "Version is the API Version of the Resource.  \"*\" means all.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "required": {
                            "description": "required defines a list of permission checks. The perspective will only be shown when all checks are successful. When omitted, the access review is skipped and the perspective will not be shown unless it is required to do so based on the configuration of the missing access review list.",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "description": "ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface",
                              "type": "object",
                              "properties": {
                                "group": {
                                  "description": "Group is the API Group of the Resource.  \"*\" means all.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "name": {
                                  "description": "Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "namespace": {
                                  "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "resource": {
                                  "description": "Resource is one of the existing resource types.  \"*\" means all.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "subresource": {
                                  "description": "Subresource is one of the existing resource types.  \"\" means none.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "verb": {
                                  "description": "Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "version": {
                                  "description": "Version is the API Version of the Resource.  \"*\" means all.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                }
                              },
                              "additionalProperties": false
                            }
                          }
                        },
                        "additionalProperties": false
                      },
                      "state": {
                        "description": "state defines the perspective is enabled or disabled or access review check is required.",
                        "type": "string",
                        "default": ""
                      }
                    },
                    "x-kubernetes-unions": [
                      {
                        "discriminator": "state",
                        "fields-to-discriminateBy": {
                          "accessReview": "AccessReview"
                        }
                      }
                    ],
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "x-kubernetes-list-map-keys": [
                "id"
              ],
              "x-kubernetes-list-type": "map"
            },
            "projectAccess": {
              "description": "ProjectAccess contains options for project access roles",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "availableClusterRoles": {
                  "description": "availableClusterRoles is the list of ClusterRole names that are assignable to users through the project access tab.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "default": ""
                  }
                }
              },
              "additionalProperties": false
            },
            "quickStarts": {
              "description": "QuickStarts allow cluster admins to customize available ConsoleQuickStart resources.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "disabled": {
                  "description": "disabled is a list of ConsoleQuickStart resource names that are not shown to users.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "default": ""
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "logLevel": {
          "description": "logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands.\n\nValid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
          "type": [
            "string",
            "null"
          ]
        },
        "managementState": {
          "description": "managementState indicates whether and how the operator should manage the component",
          "type": "string",
          "default": ""
        },
        "observedConfig": {
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\":\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
          "type": [
            "object",
            "null"
          ]
        },
        "operatorLogLevel": {
          "description": "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves.\n\nValid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
          "type": [
            "string",
            "null"
          ]
        },
        "plugins": {
          "description": "plugins defines a list of enabled console plugin names.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "providers": {
          "description": "ConsoleProviders defines a list of optional additional providers of functionality to the console.",
          "type": "object",
          "properties": {
            "statuspage": {
              "description": "StatuspageProvider provides identity for statuspage account.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "pageID"
              ],
              "properties": {
                "pageID": {
                  "description": "pageID is the unique ID assigned by Statuspage for your page. This must be a public page.",
                  "type": "string",
                  "default": ""
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "route": {
          "description": "ConsoleConfigRoute holds information on external route access to console. DEPRECATED",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "hostname"
          ],
          "properties": {
            "hostname": {
              "description": "hostname is the desired custom domain under which console will be available.",
              "type": "string",
              "default": ""
            },
            "secret": {
              "description": "SecretNameReference references a secret in a specific namespace. The namespace must be specified at the point of use.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "name is the metadata.name of the referenced secret",
                  "type": "string",
                  "default": ""
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "unsupportedConfigOverrides": {
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\":\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
          "type": [
            "object",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ConsoleStatus defines the observed status of the Console.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "readyReplicas"
      ],
      "properties": {
        "conditions": {
          "description": "conditions is a list of conditions and their status",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "OperatorCondition is just the standard condition fields.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "type",
              "status"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "message": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "reason": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "status": {
                "type": "string",
                "default": ""
              },
              "type": {
                "type": "string",
                "default": ""
              }
            },
            "additionalProperties": false
          }
        },
        "generations": {
          "description": "generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "group",
              "resource",
              "namespace",
              "name",
              "lastGeneration",
              "hash"
            ],
            "properties": {
              "group": {
                "description": "group is the group of the thing you're tracking",
                "type": "string",
                "default": ""
              },
              "hash": {
                "description": "hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps",
                "type": "string",
                "default": ""
              },
              "lastGeneration": {
                "description": "lastGeneration is the last generation of the workload controller involved",
                "type": "integer",
                "format": "int64",
                "default": 0
              },
              "name": {
                "description": "name is the name of the thing you're tracking",
                "type": "string",
                "default": ""
              },
              "namespace": {
                "description": "namespace is where the thing you're tracking is",
                "type": "string",
                "default": ""
              },
              "resource": {
                "description": "resource is the resource type of the thing you're tracking",
                "type": "string",
                "default": ""
              }
            },
            "additionalProperties": false
          }
        },
        "observedGeneration": {
          "description": "observedGeneration is the last generation change you've dealt with",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "readyReplicas": {
          "description": "readyReplicas indicates how many replicas are ready and at the desired state",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "version": {
          "description": "version is the level this availability applies to",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    }
  },
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}