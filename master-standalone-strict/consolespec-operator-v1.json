{
  "description": "ConsoleSpec is the specification of the desired behavior of the Console.",
  "type": "object",
  "required": [
    "managementState",
    "providers"
  ],
  "properties": {
    "customization": {
      "description": "ConsoleCustomization defines a list of optional configuration for the console UI.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "addPage": {
          "description": "AddPage allows customizing actions on the Add page in developer perspective.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "disabledActions": {
              "description": "disabledActions is a list of actions that are not shown to users. Each action in the list is represented by its ID.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ],
                "default": ""
              }
            }
          },
          "additionalProperties": false
        },
        "brand": {
          "description": "brand is the default branding of the web console which can be overridden by providing the brand field.  There is a limited set of specific brand options. This field controls elements of the console such as the logo. Invalid value will prevent a console rollout.",
          "type": [
            "string",
            "null"
          ]
        },
        "customLogoFile": {
          "description": "ConfigMapFileReference references a config map in a specific namespace. The namespace must be specified at the point of use.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "name"
          ],
          "properties": {
            "key": {
              "description": "Key allows pointing to a specific key/value inside of the configmap.  This is useful for logical file references.",
              "type": [
                "string",
                "null"
              ]
            },
            "name": {
              "type": "string",
              "default": ""
            }
          },
          "additionalProperties": false
        },
        "customProductName": {
          "description": "customProductName is the name that will be displayed in page titles, logo alt text, and the about dialog instead of the normal OpenShift product name.",
          "type": [
            "string",
            "null"
          ]
        },
        "developerCatalog": {
          "description": "DeveloperConsoleCatalogCustomization allow cluster admin to configure developer catalog.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "categories": {
              "description": "categories which are shown in the developer catalog.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "description": "DeveloperConsoleCatalogCategory for the developer console catalog.",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "id",
                  "label"
                ],
                "properties": {
                  "id": {
                    "description": "ID is an identifier used in the URL to enable deep linking in console. ID is required and must have 1-32 URL safe (A-Z, a-z, 0-9, - and _) characters.",
                    "type": "string",
                    "default": ""
                  },
                  "label": {
                    "description": "label defines a category display label. It is required and must have 1-64 characters.",
                    "type": "string",
                    "default": ""
                  },
                  "subcategories": {
                    "description": "subcategories defines a list of child categories.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "description": "DeveloperConsoleCatalogCategoryMeta are the key identifiers of a developer catalog category.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "required": [
                        "id",
                        "label"
                      ],
                      "properties": {
                        "id": {
                          "description": "ID is an identifier used in the URL to enable deep linking in console. ID is required and must have 1-32 URL safe (A-Z, a-z, 0-9, - and _) characters.",
                          "type": "string",
                          "default": ""
                        },
                        "label": {
                          "description": "label defines a category display label. It is required and must have 1-64 characters.",
                          "type": "string",
                          "default": ""
                        },
                        "tags": {
                          "description": "tags is a list of strings that will match the category. A selected category show all items which has at least one overlapping tag between category and item.",
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "default": ""
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "tags": {
                    "description": "tags is a list of strings that will match the category. A selected category show all items which has at least one overlapping tag between category and item.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "default": ""
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "types": {
              "description": "DeveloperConsoleCatalogTypes defines the state of the sub-catalog types.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "disabled": {
                  "description": "disabled is a list of developer catalog types (sub-catalogs IDs) that are not shown to users. Types (sub-catalogs) are added via console plugins, the available types (sub-catalog IDs) are available in the console on the cluster configuration page, or when editing the YAML in the console. Example: \"Devfile\", \"HelmChart\", \"BuilderImage\" If the list is empty or all the available sub-catalog types are added, then the complete developer catalog should be hidden.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "default": ""
                  },
                  "x-kubernetes-list-type": "set"
                },
                "enabled": {
                  "description": "enabled is a list of developer catalog types (sub-catalogs IDs) that will be shown to users. Types (sub-catalogs) are added via console plugins, the available types (sub-catalog IDs) are available in the console on the cluster configuration page, or when editing the YAML in the console. Example: \"Devfile\", \"HelmChart\", \"BuilderImage\" If the list is non-empty, a new type will not be shown to the user until it is added to list. If the list is empty the complete developer catalog will be shown.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "default": ""
                  },
                  "x-kubernetes-list-type": "set"
                },
                "state": {
                  "description": "state defines if a list of catalog types should be enabled or disabled.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "default": "Enabled"
                }
              },
              "x-kubernetes-unions": [
                {
                  "discriminator": "state",
                  "fields-to-discriminateBy": {
                    "disabled": "Disabled",
                    "enabled": "Enabled"
                  }
                }
              ],
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "documentationBaseURL": {
          "description": "documentationBaseURL links to external documentation are shown in various sections of the web console.  Providing documentationBaseURL will override the default documentation URL. Invalid value will prevent a console rollout.",
          "type": [
            "string",
            "null"
          ]
        },
        "perspectives": {
          "description": "perspectives allows enabling/disabling of perspective(s) that user can see in the Perspective switcher dropdown.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "object",
              "null"
            ],
            "required": [
              "id",
              "visibility"
            ],
            "properties": {
              "id": {
                "description": "id defines the id of the perspective. Example: \"dev\", \"admin\". The available perspective ids can be found in the code snippet section next to the yaml editor. Incorrect or unknown ids will be ignored.",
                "type": "string",
                "default": ""
              },
              "visibility": {
                "description": "PerspectiveVisibility defines the criteria to show/hide a perspective",
                "type": "object",
                "required": [
                  "state"
                ],
                "properties": {
                  "accessReview": {
                    "description": "ResourceAttributesAccessReview defines the visibility of the perspective depending on the access review checks. `required` and  `missing` can work together esp. in the case where the cluster admin wants to show another perspective to users without specific permissions. Out of `required` and `missing` atleast one property should be non-empty.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "missing": {
                        "description": "missing defines a list of permission checks. The perspective will only be shown when at least one check fails. When omitted, the access review is skipped and the perspective will not be shown unless it is required to do so based on the configuration of the required access review list.",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "description": "ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface",
                          "type": "object",
                          "properties": {
                            "group": {
                              "description": "Group is the API Group of the Resource.  \"*\" means all.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "name": {
                              "description": "Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "namespace": {
                              "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "resource": {
                              "description": "Resource is one of the existing resource types.  \"*\" means all.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "subresource": {
                              "description": "Subresource is one of the existing resource types.  \"\" means none.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "verb": {
                              "description": "Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "version": {
                              "description": "Version is the API Version of the Resource.  \"*\" means all.",
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "required": {
                        "description": "required defines a list of permission checks. The perspective will only be shown when all checks are successful. When omitted, the access review is skipped and the perspective will not be shown unless it is required to do so based on the configuration of the missing access review list.",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "description": "ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface",
                          "type": "object",
                          "properties": {
                            "group": {
                              "description": "Group is the API Group of the Resource.  \"*\" means all.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "name": {
                              "description": "Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "namespace": {
                              "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "resource": {
                              "description": "Resource is one of the existing resource types.  \"*\" means all.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "subresource": {
                              "description": "Subresource is one of the existing resource types.  \"\" means none.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "verb": {
                              "description": "Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "version": {
                              "description": "Version is the API Version of the Resource.  \"*\" means all.",
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      }
                    },
                    "additionalProperties": false
                  },
                  "state": {
                    "description": "state defines the perspective is enabled or disabled or access review check is required.",
                    "type": "string",
                    "default": ""
                  }
                },
                "x-kubernetes-unions": [
                  {
                    "discriminator": "state",
                    "fields-to-discriminateBy": {
                      "accessReview": "AccessReview"
                    }
                  }
                ],
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "id"
          ],
          "x-kubernetes-list-type": "map"
        },
        "projectAccess": {
          "description": "ProjectAccess contains options for project access roles",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "availableClusterRoles": {
              "description": "availableClusterRoles is the list of ClusterRole names that are assignable to users through the project access tab.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ],
                "default": ""
              }
            }
          },
          "additionalProperties": false
        },
        "quickStarts": {
          "description": "QuickStarts allow cluster admins to customize available ConsoleQuickStart resources.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "disabled": {
              "description": "disabled is a list of ConsoleQuickStart resource names that are not shown to users.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ],
                "default": ""
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "logLevel": {
      "description": "logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands.\n\nValid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
      "type": [
        "string",
        "null"
      ]
    },
    "managementState": {
      "description": "managementState indicates whether and how the operator should manage the component",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "observedConfig": {
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\":\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
      "type": [
        "object",
        "null"
      ]
    },
    "operatorLogLevel": {
      "description": "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves.\n\nValid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
      "type": [
        "string",
        "null"
      ]
    },
    "plugins": {
      "description": "plugins defines a list of enabled console plugin names.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": [
          "string",
          "null"
        ],
        "default": ""
      }
    },
    "providers": {
      "description": "ConsoleProviders defines a list of optional additional providers of functionality to the console.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "statuspage": {
          "description": "StatuspageProvider provides identity for statuspage account.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "pageID"
          ],
          "properties": {
            "pageID": {
              "description": "pageID is the unique ID assigned by Statuspage for your page. This must be a public page.",
              "type": "string",
              "default": ""
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "route": {
      "description": "ConsoleConfigRoute holds information on external route access to console. DEPRECATED",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "hostname"
      ],
      "properties": {
        "hostname": {
          "description": "hostname is the desired custom domain under which console will be available.",
          "type": "string",
          "default": ""
        },
        "secret": {
          "description": "SecretNameReference references a secret in a specific namespace. The namespace must be specified at the point of use.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "name is the metadata.name of the referenced secret",
              "type": "string",
              "default": ""
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "unsupportedConfigOverrides": {
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\":\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
      "type": [
        "object",
        "null"
      ]
    }
  },
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}