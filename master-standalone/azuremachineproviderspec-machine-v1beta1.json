{
  "description": "AzureMachineProviderSpec is the type that will be embedded in a Machine.Spec.ProviderSpec field for an Azure virtual machine. It is used by the Azure machine actuator to create a single Machine. Required parameters such as location that are not specified by this configuration, will be defaulted by the actuator. Compatibility level 2: Stable within a major release for a minimum of 9 months or 3 minor releases (whichever is longer).",
  "type": "object",
  "required": [
    "image",
    "osDisk",
    "publicIP",
    "subnet"
  ],
  "properties": {
    "acceleratedNetworking": {
      "description": "AcceleratedNetworking enables or disables Azure accelerated networking feature. Set to false by default. If true, then this will depend on whether the requested VMSize is supported. If set to true with an unsupported VMSize, Azure will return an error.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ]
    },
    "applicationSecurityGroups": {
      "description": "Application Security Groups that need to be attached to the machine's interface. No application security groups will be attached if zero-length.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": [
          "string",
          "null"
        ],
        "default": ""
      }
    },
    "availabilitySet": {
      "description": "AvailabilitySet specifies the availability set to use for this instance. Availability set should be precreated, before using this field.",
      "type": [
        "string",
        "null"
      ]
    },
    "credentialsSecret": {
      "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "name": {
          "description": "name is unique within a namespace to reference a secret resource.",
          "type": [
            "string",
            "null"
          ]
        },
        "namespace": {
          "description": "namespace defines the space within which the secret name must be unique.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "x-kubernetes-map-type": "atomic"
    },
    "dataDisks": {
      "description": "DataDisk specifies the parameters that are used to add one or more data disks to the machine.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "description": "DataDisk specifies the parameters that are used to add one or more data disks to the machine. A Data Disk is a managed disk that's attached to a virtual machine to store application data. It differs from an OS Disk as it doesn't come with a pre-installed OS, and it cannot contain the boot volume. It is registered as SCSI drive and labeled with the chosen `lun`. e.g. for `lun: 0` the raw disk device will be available at `/dev/disk/azure/scsi1/lun0`.\n\nAs the Data Disk disk device is attached raw to the virtual machine, it will need to be partitioned, formatted with a filesystem and mounted, in order for it to be usable. This can be done by creating a custom userdata Secret with custom Ignition configuration to achieve the desired initialization. At this stage the previously defined `lun` is to be used as the \"device\" key for referencing the raw disk device to be initialized. Once the custom userdata Secret has been created, it can be referenced in the Machine's `.providerSpec.userDataSecret`. For further guidance and examples, please refer to the official OpenShift docs.",
        "type": [
          "object",
          "null"
        ],
        "required": [
          "nameSuffix",
          "diskSizeGB",
          "deletionPolicy"
        ],
        "properties": {
          "cachingType": {
            "description": "CachingType specifies the caching requirements. Empty value means no opinion and the platform chooses a default, which is subject to change over time. Currently the default is CachingTypeNone.",
            "type": [
              "string",
              "null"
            ]
          },
          "deletionPolicy": {
            "description": "DeletionPolicy specifies the data disk deletion policy upon Machine deletion. Possible values are \"Delete\",\"Detach\". When \"Delete\" is used the data disk is deleted when the Machine is deleted. When \"Detach\" is used the data disk is detached from the Machine and retained when the Machine is deleted.",
            "type": "string",
            "default": ""
          },
          "diskSizeGB": {
            "description": "DiskSizeGB is the size in GB to assign to the data disk.",
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "lun": {
            "description": "Lun Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM. This value is also needed for referencing the data disks devices within userdata to perform disk initialization through Ignition (e.g. partition/format/mount). The value must be between 0 and 63.",
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "managedDisk": {
            "description": "DataDiskManagedDiskParameters is the parameters of a DataDisk managed disk.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "storageAccountType"
            ],
            "properties": {
              "diskEncryptionSet": {
                "description": "DiskEncryptionSetParameters is the disk encryption set properties",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "id": {
                    "description": "ID is the disk encryption set ID Empty value means no opinion and the platform chooses a default, which is subject to change over time. Currently the default is: \"Default\".",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              "storageAccountType": {
                "description": "StorageAccountType is the storage account type to use. Possible values include \"Standard_LRS\", \"Premium_LRS\" and \"UltraSSD_LRS\".",
                "type": "string",
                "default": ""
              }
            }
          },
          "nameSuffix": {
            "description": "NameSuffix is the suffix to be appended to the machine name to generate the disk name. Each disk name will be in format <machineName>_<nameSuffix>. NameSuffix name must start and finish with an alphanumeric character and can only contain letters, numbers, underscores, periods or hyphens. The overall disk name must not exceed 80 chars in length.",
            "type": "string",
            "default": ""
          }
        }
      }
    },
    "diagnostics": {
      "description": "AzureDiagnostics is used to configure the diagnostic settings of the virtual machine.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "boot": {
          "description": "AzureBootDiagnostics configures the boot diagnostics settings for the virtual machine. This allows you to configure capturing serial output from the virtual machine on boot. This is useful for debugging software based launch issues.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "storageAccountType"
          ],
          "properties": {
            "customerManaged": {
              "description": "AzureCustomerManagedBootDiagnostics provides reference to a customer managed storage account.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "storageAccountURI"
              ],
              "properties": {
                "storageAccountURI": {
                  "description": "StorageAccountURI is the URI of the customer managed storage account. The URI typically will be `https://<mystorageaccountname>.blob.core.windows.net/` but may differ if you are using Azure DNS zone endpoints. You can find the correct endpoint by looking for the Blob Primary Endpoint in the endpoints tab in the Azure console.",
                  "type": "string",
                  "default": ""
                }
              }
            },
            "storageAccountType": {
              "description": "StorageAccountType determines if the storage account for storing the diagnostics data should be provisioned by Azure (AzureManaged) or by the customer (CustomerManaged).",
              "type": "string",
              "default": ""
            }
          },
          "x-kubernetes-unions": [
            {
              "discriminator": "storageAccountType",
              "fields-to-discriminateBy": {
                "customerManaged": "CustomerManaged"
              }
            }
          ]
        }
      }
    },
    "image": {
      "description": "Image is a mirror of azure sdk compute.ImageReference",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "publisher",
        "offer",
        "sku",
        "version",
        "resourceID"
      ],
      "properties": {
        "offer": {
          "description": "Offer specifies the name of a group of related images created by the publisher. For example, UbuntuServer, WindowsServer",
          "type": "string",
          "default": ""
        },
        "publisher": {
          "description": "Publisher is the name of the organization that created the image",
          "type": "string",
          "default": ""
        },
        "resourceID": {
          "description": "ResourceID specifies an image to use by ID",
          "type": "string",
          "default": ""
        },
        "sku": {
          "description": "SKU specifies an instance of an offer, such as a major release of a distribution. For example, 18.04-LTS, 2019-Datacenter",
          "type": "string",
          "default": ""
        },
        "type": {
          "description": "Type identifies the source of the image and related information, such as purchase plans. Valid values are \"ID\", \"MarketplaceWithPlan\", \"MarketplaceNoPlan\", and omitted, which means no opinion and the platform chooses a good default which may change over time. Currently that default is \"MarketplaceNoPlan\" if publisher data is supplied, or \"ID\" if not. For more information about purchase plans, see: https://docs.microsoft.com/en-us/azure/virtual-machines/linux/cli-ps-findimage#check-the-purchase-plan-information",
          "type": [
            "string",
            "null"
          ]
        },
        "version": {
          "description": "Version specifies the version of an image sku. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.",
          "type": "string",
          "default": ""
        }
      }
    },
    "internalLoadBalancer": {
      "description": "InternalLoadBalancerName to use for this instance",
      "type": [
        "string",
        "null"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ]
    },
    "location": {
      "description": "Location is the region to use to create the instance",
      "type": [
        "string",
        "null"
      ]
    },
    "managedIdentity": {
      "description": "ManagedIdentity to set managed identity name",
      "type": [
        "string",
        "null"
      ]
    },
    "metadata": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "creationTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "deletionTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          },
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": [
            "string",
            "null"
          ]
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "fieldsType": {
                "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                "type": [
                  "string",
                  "null"
                ]
              },
              "fieldsV1": {
                "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                "type": [
                  "object",
                  "null"
                ]
              },
              "manager": {
                "description": "Manager is an identifier of the workflow managing these fields.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "operation": {
                "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "subresource": {
                "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "time": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              }
            }
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": [
            "string",
            "null"
          ]
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": [
            "string",
            "null"
          ]
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "apiVersion",
              "kind",
              "name",
              "uid"
            ],
            "properties": {
              "apiVersion": {
                "description": "API version of the referent.",
                "type": "string",
                "default": ""
              },
              "blockOwnerDeletion": {
                "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "controller": {
                "description": "If true, this reference points to the managing controller.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "kind": {
                "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string",
                "default": ""
              },
              "name": {
                "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                "type": "string",
                "default": ""
              },
              "uid": {
                "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                "type": "string",
                "default": ""
              }
            },
            "x-kubernetes-map-type": "atomic"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": [
            "string",
            "null"
          ]
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": [
            "string",
            "null"
          ]
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "natRule": {
      "description": "NatRule to set inbound NAT rule of the load balancer",
      "type": [
        "integer",
        "null"
      ],
      "format": "int64"
    },
    "networkResourceGroup": {
      "description": "NetworkResourceGroup is the resource group for the virtual machine's network",
      "type": [
        "string",
        "null"
      ]
    },
    "osDisk": {
      "type": [
        "object",
        "null"
      ],
      "required": [
        "osType",
        "managedDisk",
        "diskSizeGB"
      ],
      "properties": {
        "cachingType": {
          "description": "CachingType specifies the caching requirements. Possible values include: 'None', 'ReadOnly', 'ReadWrite'. Empty value means no opinion and the platform chooses a default, which is subject to change over time. Currently the default is `None`.",
          "type": [
            "string",
            "null"
          ]
        },
        "diskSettings": {
          "description": "DiskSettings describe ephemeral disk settings for the os disk.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "ephemeralStorageLocation": {
              "description": "EphemeralStorageLocation enables ephemeral OS when set to 'Local'. Possible values include: 'Local'. See https://docs.microsoft.com/en-us/azure/virtual-machines/ephemeral-os-disks for full details. Empty value means no opinion and the platform chooses a default, which is subject to change over time. Currently the default is that disks are saved to remote Azure storage.",
              "type": [
                "string",
                "null"
              ]
            }
          }
        },
        "diskSizeGB": {
          "description": "DiskSizeGB is the size in GB to assign to the data disk.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "managedDisk": {
          "description": "OSDiskManagedDiskParameters is the parameters of a OSDisk managed disk.",
          "type": "object",
          "required": [
            "storageAccountType"
          ],
          "properties": {
            "diskEncryptionSet": {
              "description": "DiskEncryptionSetParameters is the disk encryption set properties",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "id": {
                  "description": "ID is the disk encryption set ID Empty value means no opinion and the platform chooses a default, which is subject to change over time. Currently the default is: \"Default\".",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            },
            "storageAccountType": {
              "description": "StorageAccountType is the storage account type to use. Possible values include \"Standard_LRS\", \"Premium_LRS\".",
              "type": "string",
              "default": ""
            }
          }
        },
        "osType": {
          "description": "OSType is the operating system type of the OS disk. Possible values include \"Linux\" and \"Windows\".",
          "type": "string",
          "default": ""
        }
      }
    },
    "publicIP": {
      "description": "PublicIP if true a public IP will be used",
      "type": [
        "boolean",
        "null"
      ],
      "default": false
    },
    "publicLoadBalancer": {
      "description": "PublicLoadBalancer to use for this instance",
      "type": [
        "string",
        "null"
      ]
    },
    "resourceGroup": {
      "description": "ResourceGroup is the resource group for the virtual machine",
      "type": [
        "string",
        "null"
      ]
    },
    "securityGroup": {
      "description": "Network Security Group that needs to be attached to the machine's interface. No security group will be attached if empty.",
      "type": [
        "string",
        "null"
      ]
    },
    "securityProfile": {
      "description": "SecurityProfile specifies the Security profile settings for a virtual machine or virtual machine scale set.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "encryptionAtHost": {
          "description": "This field indicates whether Host Encryption should be enabled or disabled for a virtual machine or virtual machine scale set. Default is disabled.",
          "type": [
            "boolean",
            "null"
          ]
        }
      }
    },
    "spotVMOptions": {
      "description": "SpotVMOptions defines the options relevant to running the Machine on Spot VMs",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "maxPrice": {
          "oneOf": [
            {
              "type": [
                "string",
                "null"
              ]
            },
            {
              "type": [
                "number",
                "null"
              ]
            }
          ]
        }
      }
    },
    "sshPublicKey": {
      "description": "SSHPublicKey is the public key to use to SSH to the virtual machine.",
      "type": [
        "string",
        "null"
      ]
    },
    "subnet": {
      "description": "Subnet to use for this instance",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "tags": {
      "description": "Tags is a list of tags to apply to the machine.",
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": {
        "type": [
          "string",
          "null"
        ],
        "default": ""
      }
    },
    "ultraSSDCapability": {
      "description": "UltraSSDCapability enables or disables Azure UltraSSD capability for a virtual machine. This can be used to allow/disallow binding of Azure UltraSSD to the Machine both as Data Disks or via Persistent Volumes. This Azure feature is subject to a specific scope and certain limitations. More informations on this can be found in the official Azure documentation for Ultra Disks: (https://docs.microsoft.com/en-us/azure/virtual-machines/disks-enable-ultra-ssd?tabs=azure-portal#ga-scope-and-limitations).\n\nWhen omitted, if at least one Data Disk of type UltraSSD is specified, the platform will automatically enable the capability. If a Perisistent Volume backed by an UltraSSD is bound to a Pod on the Machine, when this field is ommitted, the platform will *not* automatically enable the capability (unless already enabled by the presence of an UltraSSD as Data Disk). This may manifest in the Pod being stuck in `ContainerCreating` phase. This defaulting behaviour may be subject to change in future.\n\nWhen set to \"Enabled\", if the capability is available for the Machine based on the scope and limitations described above, the capability will be set on the Machine. This will thus allow UltraSSD both as Data Disks and Persistent Volumes. If set to \"Enabled\" when the capability can't be available due to scope and limitations, the Machine will go into \"Failed\" state.\n\nWhen set to \"Disabled\", UltraSSDs will not be allowed either as Data Disks nor as Persistent Volumes. In this case if any UltraSSDs are specified as Data Disks on a Machine, the Machine will go into a \"Failed\" state. If instead any UltraSSDs are backing the volumes (via Persistent Volumes) of any Pods scheduled on a Node which is backed by the Machine, the Pod may get stuck in `ContainerCreating` phase.",
      "type": [
        "string",
        "null"
      ]
    },
    "userDataSecret": {
      "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "name": {
          "description": "name is unique within a namespace to reference a secret resource.",
          "type": [
            "string",
            "null"
          ]
        },
        "namespace": {
          "description": "namespace defines the space within which the secret name must be unique.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "x-kubernetes-map-type": "atomic"
    },
    "vmSize": {
      "description": "VMSize is the size of the VM to create.",
      "type": [
        "string",
        "null"
      ]
    },
    "vnet": {
      "description": "Vnet to set virtual network name",
      "type": [
        "string",
        "null"
      ]
    },
    "zone": {
      "description": "Availability Zone for the virtual machine. If nil, the virtual machine should be deployed to no zone",
      "type": [
        "string",
        "null"
      ]
    }
  },
  "$schema": "http://json-schema.org/schema#"
}