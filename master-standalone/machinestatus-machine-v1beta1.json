{
  "description": "MachineStatus defines the observed state of Machine",
  "type": "object",
  "properties": {
    "addresses": {
      "description": "Addresses is a list of addresses assigned to the machine. Queried from cloud provider, if available.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "description": "NodeAddress contains information for the node's address.",
        "type": [
          "object",
          "null"
        ],
        "required": [
          "type",
          "address"
        ],
        "properties": {
          "address": {
            "description": "The node address.",
            "type": "string",
            "default": ""
          },
          "type": {
            "description": "Node address type, one of Hostname, ExternalIP or InternalIP.",
            "type": "string",
            "default": ""
          }
        }
      }
    },
    "conditions": {
      "description": "Conditions defines the current state of the Machine",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "description": "Condition defines an observation of a Machine API resource operational state.",
        "type": [
          "object",
          "null"
        ],
        "required": [
          "type",
          "status"
        ],
        "properties": {
          "lastTransitionTime": {
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "message": {
            "description": "A human readable message indicating details about the transition. This field may be empty.",
            "type": [
              "string",
              "null"
            ]
          },
          "reason": {
            "description": "The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.",
            "type": [
              "string",
              "null"
            ]
          },
          "severity": {
            "description": "Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.",
            "type": [
              "string",
              "null"
            ]
          },
          "status": {
            "description": "Status of the condition, one of True, False, Unknown.",
            "type": "string",
            "default": ""
          },
          "type": {
            "description": "Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.",
            "type": "string",
            "default": ""
          }
        }
      }
    },
    "errorMessage": {
      "description": "ErrorMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption.\n\nThis field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.\n\nAny transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.",
      "type": [
        "string",
        "null"
      ]
    },
    "errorReason": {
      "description": "ErrorReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation.\n\nThis field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured.\n\nAny transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.",
      "type": [
        "string",
        "null"
      ]
    },
    "lastOperation": {
      "description": "LastOperation represents the detail of the last performed operation on the MachineObject.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "description": {
          "description": "Description is the human-readable description of the last operation.",
          "type": [
            "string",
            "null"
          ]
        },
        "lastUpdated": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time"
        },
        "state": {
          "description": "State is the current status of the last performed operation. E.g. Processing, Failed, Successful etc",
          "type": [
            "string",
            "null"
          ]
        },
        "type": {
          "description": "Type is the type of operation which was last performed. E.g. Create, Delete, Update etc",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "lastUpdated": {
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
      "type": [
        "string",
        "null"
      ],
      "format": "date-time"
    },
    "nodeRef": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": [
            "string",
            "null"
          ]
        },
        "fieldPath": {
          "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
          "type": [
            "string",
            "null"
          ]
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": [
            "string",
            "null"
          ]
        },
        "namespace": {
          "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
          "type": [
            "string",
            "null"
          ]
        },
        "resourceVersion": {
          "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": [
            "string",
            "null"
          ]
        },
        "uid": {
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "x-kubernetes-map-type": "atomic"
    },
    "phase": {
      "description": "Phase represents the current phase of machine actuation. One of: Failed, Provisioning, Provisioned, Running, Deleting",
      "type": [
        "string",
        "null"
      ]
    },
    "providerStatus": {
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\":\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
      "type": [
        "object",
        "null"
      ]
    }
  },
  "$schema": "http://json-schema.org/schema#"
}