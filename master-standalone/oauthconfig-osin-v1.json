{
  "description": "OAuthConfig holds the necessary configuration options for OAuth authentication",
  "type": "object",
  "required": [
    "masterCA",
    "masterURL",
    "masterPublicURL",
    "loginURL",
    "assetPublicURL",
    "alwaysShowProviderSelection",
    "identityProviders",
    "grantConfig",
    "sessionConfig",
    "tokenConfig",
    "templates"
  ],
  "properties": {
    "alwaysShowProviderSelection": {
      "description": "alwaysShowProviderSelection will force the provider selection page to render even when there is only a single provider.",
      "type": [
        "boolean",
        "null"
      ],
      "default": false
    },
    "assetPublicURL": {
      "description": "assetPublicURL is used for building valid client redirect URLs for external access",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "grantConfig": {
      "description": "GrantConfig holds the necessary configuration options for grant handlers",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "method",
        "serviceAccountMethod"
      ],
      "properties": {
        "method": {
          "description": "method determines the default strategy to use when an OAuth client requests a grant. This method will be used only if the specific OAuth client doesn't provide a strategy of their own. Valid grant handling methods are:\n - auto:   always approves grant requests, useful for trusted clients\n - prompt: prompts the end user for approval of grant requests, useful for third-party clients\n - deny:   always denies grant requests, useful for black-listed clients",
          "type": "string",
          "default": ""
        },
        "serviceAccountMethod": {
          "description": "serviceAccountMethod is used for determining client authorization for service account oauth client. It must be either: deny, prompt",
          "type": "string",
          "default": ""
        }
      }
    },
    "identityProviders": {
      "description": "identityProviders is an ordered list of ways for a user to identify themselves",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "description": "IdentityProvider provides identities for users authenticating using credentials",
        "type": [
          "object",
          "null"
        ],
        "required": [
          "name",
          "challenge",
          "login",
          "mappingMethod",
          "provider"
        ],
        "properties": {
          "challenge": {
            "description": "challenge indicates whether to issue WWW-Authenticate challenges for this provider",
            "type": "boolean",
            "default": false
          },
          "login": {
            "description": "login indicates whether to use this identity provider for unauthenticated browsers to login against",
            "type": "boolean",
            "default": false
          },
          "mappingMethod": {
            "description": "mappingMethod determines how identities from this provider are mapped to users",
            "type": "string",
            "default": ""
          },
          "name": {
            "description": "name is used to qualify the identities returned by this provider",
            "type": "string",
            "default": ""
          },
          "provider": {
            "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\":\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
            "type": "object"
          }
        }
      }
    },
    "loginURL": {
      "description": "loginURL, along with masterCA, masterURL and masterPublicURL have distinct meanings depending on how the OAuth server is run.  The two states are: 1. embedded in the kube api server (all 3.x releases) 2. as a standalone external process (all 4.x releases) in the embedded configuration, loginURL is equivalent to masterPublicURL and the other fields have functionality that matches their docs. in the standalone configuration, the fields are used as: loginURL is the URL required to login to the cluster: oc login --server=<loginURL> masterPublicURL is the issuer URL it is accessible from inside (service network) and outside (ingress) of the cluster masterURL is the loopback variation of the token_endpoint URL with no path component it is only accessible from inside (service network) of the cluster masterCA is used to perform TLS verification for connections made to masterURL For further details, see the IETF Draft: https://tools.ietf.org/html/draft-ietf-oauth-discovery-04#section-2",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "masterCA": {
      "description": "masterCA is the CA for verifying the TLS connection back to the MasterURL. This field is deprecated and will be removed in a future release. See loginURL for details. Deprecated",
      "type": [
        "string",
        "null"
      ]
    },
    "masterPublicURL": {
      "description": "masterPublicURL is used for building valid client redirect URLs for internal and external access This field is deprecated and will be removed in a future release. See loginURL for details. Deprecated",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "masterURL": {
      "description": "masterURL is used for making server-to-server calls to exchange authorization codes for access tokens This field is deprecated and will be removed in a future release. See loginURL for details. Deprecated",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "sessionConfig": {
      "description": "SessionConfig specifies options for cookie-based sessions. Used by AuthRequestHandlerSession",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "sessionSecretsFile",
        "sessionMaxAgeSeconds",
        "sessionName"
      ],
      "properties": {
        "sessionMaxAgeSeconds": {
          "description": "sessionMaxAgeSeconds specifies how long created sessions last. Used by AuthRequestHandlerSession",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "sessionName": {
          "description": "sessionName is the cookie name used to store the session",
          "type": "string",
          "default": ""
        },
        "sessionSecretsFile": {
          "description": "sessionSecretsFile is a reference to a file containing a serialized SessionSecrets object If no file is specified, a random signing and encryption key are generated at each server start",
          "type": "string",
          "default": ""
        }
      }
    },
    "templates": {
      "description": "OAuthTemplates allow for customization of pages like the login page",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "login",
        "providerSelection",
        "error"
      ],
      "properties": {
        "error": {
          "description": "error is a path to a file containing a go template used to render error pages during the authentication or grant flow If unspecified, the default error page is used.",
          "type": "string",
          "default": ""
        },
        "login": {
          "description": "login is a path to a file containing a go template used to render the login page. If unspecified, the default login page is used.",
          "type": "string",
          "default": ""
        },
        "providerSelection": {
          "description": "providerSelection is a path to a file containing a go template used to render the provider selection page. If unspecified, the default provider selection page is used.",
          "type": "string",
          "default": ""
        }
      }
    },
    "tokenConfig": {
      "description": "TokenConfig holds the necessary configuration options for authorization and access tokens",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "accessTokenInactivityTimeout": {
          "description": "Duration is a wrapper around time.Duration which supports correct marshaling to YAML and JSON. In particular, it marshals into strings, which can be used as map keys in json.",
          "type": [
            "string",
            "null"
          ]
        },
        "accessTokenInactivityTimeoutSeconds": {
          "description": "accessTokenInactivityTimeoutSeconds - DEPRECATED: setting this field has no effect.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "accessTokenMaxAgeSeconds": {
          "description": "accessTokenMaxAgeSeconds defines the maximum age of access tokens",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "authorizeTokenMaxAgeSeconds": {
          "description": "authorizeTokenMaxAgeSeconds defines the maximum age of authorize tokens",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        }
      }
    }
  },
  "$schema": "http://json-schema.org/schema#"
}