{
  "type": "object",
  "properties": {
    "additionalCORSAllowedOrigins": {
      "description": "additionalCORSAllowedOrigins lists additional, user-defined regular expressions describing hosts for which the API server allows access using the CORS headers. This may be needed to access the API and the integrated OAuth server from JavaScript applications. The values are regular expressions that correspond to the Golang regular expression language.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": [
          "string",
          "null"
        ],
        "default": ""
      }
    },
    "audit": {
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "customRules": {
          "description": "customRules specify profiles per group. These profile take precedence over the top-level profile field if they apply. They are evaluation from top to bottom and the first one that matches, applies.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "AuditCustomRule describes a custom rule for an audit profile that takes precedence over the top-level profile.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "group"
            ],
            "properties": {
              "group": {
                "description": "group is a name of group a request user must be member of in order to this profile to apply.",
                "type": "string",
                "default": ""
              },
              "profile": {
                "description": "profile specifies the name of the desired audit policy configuration to be deployed to all OpenShift-provided API servers in the cluster.\n\nThe following profiles are provided: - Default: the existing default policy. - WriteRequestBodies: like 'Default', but logs request and response HTTP payloads for write requests (create, update, patch). - AllRequestBodies: like 'WriteRequestBodies', but also logs request and response HTTP payloads for read requests (get, list). - None: no requests are logged at all, not even oauthaccesstokens and oauthauthorizetokens.\n\nIf unset, the 'Default' profile is used as the default.",
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          },
          "x-kubernetes-list-map-keys": [
            "group"
          ],
          "x-kubernetes-list-type": "map"
        },
        "profile": {
          "description": "profile specifies the name of the desired top-level audit profile to be applied to all requests sent to any of the OpenShift-provided API servers in the cluster (kube-apiserver, openshift-apiserver and oauth-apiserver), with the exception of those requests that match one or more of the customRules.\n\nThe following profiles are provided: - Default: default policy which means MetaData level logging with the exception of events\n  (not logged at all), oauthaccesstokens and oauthauthorizetokens (both logged at RequestBody\n  level).\n- WriteRequestBodies: like 'Default', but logs request and response HTTP payloads for write requests (create, update, patch). - AllRequestBodies: like 'WriteRequestBodies', but also logs request and response HTTP payloads for read requests (get, list). - None: no requests are logged at all, not even oauthaccesstokens and oauthauthorizetokens.\n\nWarning: It is not recommended to disable audit logging by using the `None` profile unless you are fully aware of the risks of not logging data that can be beneficial when troubleshooting issues. If you disable audit logging and a support situation arises, you might need to enable audit logging and reproduce the issue in order to troubleshoot properly.\n\nIf unset, the 'Default' profile is used as the default.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "clientCA": {
      "description": "ConfigMapNameReference references a config map in a specific namespace. The namespace must be specified at the point of use.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "name is the metadata.name of the referenced config map",
          "type": "string",
          "default": ""
        }
      }
    },
    "encryption": {
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "type": {
          "description": "type defines what encryption type should be used to encrypt resources at the datastore layer. When this field is unset (i.e. when it is set to the empty string), identity is implied. The behavior of unset can and will change over time.  Even if encryption is enabled by default, the meaning of unset may change to a different encryption type based on changes in best practices.\n\nWhen encryption is enabled, all sensitive resources shipped with the platform are encrypted. This list of sensitive resources can and will change over time.  The current authoritative list is:\n\n  1. secrets\n  2. configmaps\n  3. routes.route.openshift.io\n  4. oauthaccesstokens.oauth.openshift.io\n  5. oauthauthorizetokens.oauth.openshift.io",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "servingCerts": {
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "namedCertificates": {
          "description": "namedCertificates references secrets containing the TLS cert info for serving secure traffic to specific hostnames. If no named certificates are provided, or no named certificates match the server name as understood by a client, the defaultServingCertificate will be used.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "APIServerNamedServingCert maps a server DNS name, as understood by a client, to a certificate.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "servingCertificate"
            ],
            "properties": {
              "names": {
                "description": "names is a optional list of explicit DNS names (leading wildcards allowed) that should use this certificate to serve secure traffic. If no names are provided, the implicit names will be extracted from the certificates. Exact names trump over wildcard names. Explicit names defined here trump over extracted implicit names.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": [
                    "string",
                    "null"
                  ],
                  "default": ""
                }
              },
              "servingCertificate": {
                "description": "SecretNameReference references a secret in a specific namespace. The namespace must be specified at the point of use.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "name is the metadata.name of the referenced secret",
                    "type": "string",
                    "default": ""
                  }
                }
              }
            }
          }
        }
      }
    },
    "tlsSecurityProfile": {
      "description": "TLSSecurityProfile defines the schema for a TLS security profile. This object is used by operators to apply TLS security settings to operands.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "custom": {
          "description": "CustomTLSProfile is a user-defined TLS security profile. Be extremely careful using a custom TLS profile as invalid configurations can be catastrophic.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "ciphers",
            "minTLSVersion"
          ],
          "properties": {
            "ciphers": {
              "description": "ciphers is used to specify the cipher algorithms that are negotiated during the TLS handshake.  Operators may remove entries their operands do not support.  For example, to use DES-CBC3-SHA  (yaml):\n\n  ciphers:\n    - DES-CBC3-SHA",
              "type": "array",
              "items": {
                "type": [
                  "string",
                  "null"
                ],
                "default": ""
              }
            },
            "minTLSVersion": {
              "description": "minTLSVersion is used to specify the minimal version of the TLS protocol that is negotiated during the TLS handshake. For example, to use TLS versions 1.1, 1.2 and 1.3 (yaml):\n\n  minTLSVersion: TLSv1.1\n\nNOTE: currently the highest minTLSVersion allowed is VersionTLS12",
              "type": "string",
              "default": ""
            }
          }
        },
        "intermediate": {
          "description": "IntermediateTLSProfile is a TLS security profile based on: https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28default.29",
          "type": [
            "object",
            "null"
          ]
        },
        "modern": {
          "description": "ModernTLSProfile is a TLS security profile based on: https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility",
          "type": [
            "object",
            "null"
          ]
        },
        "old": {
          "description": "OldTLSProfile is a TLS security profile based on: https://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility",
          "type": [
            "object",
            "null"
          ]
        },
        "type": {
          "description": "type is one of Old, Intermediate, Modern or Custom. Custom provides the ability to specify individual TLS security profile parameters. Old, Intermediate and Modern are TLS security profiles based on:\n\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations\n\nThe profiles are intent based, so they may change over time as new ciphers are developed and existing ciphers are found to be insecure.  Depending on precisely which ciphers are available to a process, the list may be reduced.\n\nNote that the Modern profile is currently not supported because it is not yet well adopted by common software libraries.",
          "type": [
            "string",
            "null"
          ],
          "default": ""
        }
      },
      "x-kubernetes-unions": [
        {
          "discriminator": "type",
          "fields-to-discriminateBy": {
            "custom": "Custom",
            "intermediate": "Intermediate",
            "modern": "Modern",
            "old": "Old"
          }
        }
      ]
    }
  },
  "$schema": "http://json-schema.org/schema#"
}