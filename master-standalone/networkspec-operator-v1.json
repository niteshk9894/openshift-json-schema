{
  "description": "NetworkSpec is the top-level network configuration object.",
  "type": "object",
  "required": [
    "managementState",
    "clusterNetwork",
    "serviceNetwork",
    "defaultNetwork"
  ],
  "properties": {
    "additionalNetworks": {
      "description": "additionalNetworks is a list of extra networks to make available to pods when multiple networks are enabled.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "description": "AdditionalNetworkDefinition configures an extra network that is available but not created by default. Instead, pods must request them by name. type must be specified, along with exactly one \"Config\" that matches the type.",
        "type": [
          "object",
          "null"
        ],
        "required": [
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "description": "name is the name of the network. This will be populated in the resulting CRD This must be unique.",
            "type": "string",
            "default": ""
          },
          "namespace": {
            "description": "namespace is the namespace of the network. This will be populated in the resulting CRD If not given the network will be created in the default namespace.",
            "type": [
              "string",
              "null"
            ]
          },
          "rawCNIConfig": {
            "description": "rawCNIConfig is the raw CNI configuration json to create in the NetworkAttachmentDefinition CRD",
            "type": [
              "string",
              "null"
            ]
          },
          "simpleMacvlanConfig": {
            "description": "SimpleMacvlanConfig contains configurations for macvlan interface.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "ipamConfig": {
                "description": "IPAMConfig contains configurations for IPAM (IP Address Management)",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "type"
                ],
                "properties": {
                  "staticIPAMConfig": {
                    "description": "StaticIPAMConfig contains configurations for static IPAM (IP Address Management)",
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "addresses": {
                        "description": "Addresses configures IP address for the interface",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "description": "StaticIPAMAddresses provides IP address and Gateway for static IPAM addresses",
                          "type": [
                            "object",
                            "null"
                          ],
                          "properties": {
                            "address": {
                              "description": "Address is the IP address in CIDR format",
                              "type": [
                                "string",
                                "null"
                              ],
                              "default": ""
                            },
                            "gateway": {
                              "description": "Gateway is IP inside of subnet to designate as the gateway",
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          }
                        }
                      },
                      "dns": {
                        "description": "StaticIPAMDNS provides DNS related information for static IPAM",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "domain": {
                            "description": "Domain configures the domainname the local domain used for short hostname lookups",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "nameservers": {
                            "description": "Nameservers points DNS servers for IP lookup",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "default": ""
                            }
                          },
                          "search": {
                            "description": "Search configures priority ordered search domains for short hostname lookups",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "default": ""
                            }
                          }
                        }
                      },
                      "routes": {
                        "description": "Routes configures IP routes for the interface",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "description": "StaticIPAMRoutes provides Destination/Gateway pairs for static IPAM routes",
                          "type": [
                            "object",
                            "null"
                          ],
                          "required": [
                            "destination"
                          ],
                          "properties": {
                            "destination": {
                              "description": "Destination points the IP route destination",
                              "type": "string",
                              "default": ""
                            },
                            "gateway": {
                              "description": "Gateway is the route's next-hop IP address If unset, a default gateway is assumed (as determined by the CNI plugin).",
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          }
                        }
                      }
                    }
                  },
                  "type": {
                    "description": "Type is the type of IPAM module will be used for IP Address Management(IPAM). The supported values are IPAMTypeDHCP, IPAMTypeStatic",
                    "type": "string",
                    "default": ""
                  }
                }
              },
              "master": {
                "description": "master is the host interface to create the macvlan interface from. If not specified, it will be default route interface",
                "type": [
                  "string",
                  "null"
                ]
              },
              "mode": {
                "description": "mode is the macvlan mode: bridge, private, vepa, passthru. The default is bridge",
                "type": [
                  "string",
                  "null"
                ]
              },
              "mtu": {
                "description": "mtu is the mtu to use for the macvlan interface. if unset, host's kernel will select the value.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64"
              }
            }
          },
          "type": {
            "description": "type is the type of network The supported values are NetworkTypeRaw, NetworkTypeSimpleMacvlan",
            "type": "string",
            "default": ""
          }
        }
      }
    },
    "clusterNetwork": {
      "description": "clusterNetwork is the IP address pool to use for pod IPs. Some network providers, e.g. OpenShift SDN, support multiple ClusterNetworks. Others only support one. This is equivalent to the cluster-cidr.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "description": "ClusterNetworkEntry is a subnet from which to allocate PodIPs. A network of size HostPrefix (in CIDR notation) will be allocated when nodes join the cluster. If the HostPrefix field is not used by the plugin, it can be left unset. Not all network providers support multiple ClusterNetworks",
        "type": [
          "object",
          "null"
        ],
        "required": [
          "cidr"
        ],
        "properties": {
          "cidr": {
            "type": "string",
            "default": ""
          },
          "hostPrefix": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          }
        }
      }
    },
    "defaultNetwork": {
      "description": "DefaultNetworkDefinition represents a single network plugin's configuration. type must be specified, along with exactly one \"Config\" that matches the type.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "type"
      ],
      "properties": {
        "kuryrConfig": {
          "description": "KuryrConfig configures the Kuryr-Kubernetes SDN",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "controllerProbesPort": {
              "description": "The port kuryr-controller will listen for readiness and liveness requests.",
              "type": [
                "integer",
                "null"
              ],
              "format": "int64"
            },
            "daemonProbesPort": {
              "description": "The port kuryr-daemon will listen for readiness and liveness requests.",
              "type": [
                "integer",
                "null"
              ],
              "format": "int64"
            },
            "enablePortPoolsPrepopulation": {
              "description": "enablePortPoolsPrepopulation when true will make Kuryr prepopulate each newly created port pool with a minimum number of ports. Kuryr uses Neutron port pooling to fight the fact that it takes a significant amount of time to create one. It creates a number of ports when the first pod that is configured to use the dedicated network for pods is created in a namespace, and keeps them ready to be attached to pods. Port prepopulation is disabled by default.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "mtu": {
              "description": "mtu is the MTU that Kuryr should use when creating pod networks in Neutron. The value has to be lower or equal to the MTU of the nodes network and Neutron has to allow creation of tenant networks with such MTU. If unset Pod networks will be created with the same MTU as the nodes network has.",
              "type": [
                "integer",
                "null"
              ],
              "format": "int64"
            },
            "openStackServiceNetwork": {
              "description": "openStackServiceNetwork contains the CIDR of network from which to allocate IPs for OpenStack Octavia's Amphora VMs. Please note that with Amphora driver Octavia uses two IPs from that network for each loadbalancer - one given by OpenShift and second for VRRP connections. As the first one is managed by OpenShift's and second by Neutron's IPAMs, those need to come from different pools. Therefore `openStackServiceNetwork` needs to be at least twice the size of `serviceNetwork`, and whole `serviceNetwork` must be overlapping with `openStackServiceNetwork`. cluster-network-operator will then make sure VRRP IPs are taken from the ranges inside `openStackServiceNetwork` that are not overlapping with `serviceNetwork`, effectivly preventing conflicts. If not set cluster-network-operator will use `serviceNetwork` expanded by decrementing the prefix size by 1.",
              "type": [
                "string",
                "null"
              ]
            },
            "poolBatchPorts": {
              "description": "poolBatchPorts sets a number of ports that should be created in a single batch request to extend the port pool. The default is 3. For more information about port pools see enablePortPoolsPrepopulation setting.",
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "poolMaxPorts": {
              "description": "poolMaxPorts sets a maximum number of free ports that are being kept in a port pool. If the number of ports exceeds this setting, free ports will get deleted. Setting 0 will disable this upper bound, effectively preventing pools from shrinking and this is the default value. For more information about port pools see enablePortPoolsPrepopulation setting.",
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "poolMinPorts": {
              "description": "poolMinPorts sets a minimum number of free ports that should be kept in a port pool. If the number of ports is lower than this setting, new ports will get created and added to pool. The default is 1. For more information about port pools see enablePortPoolsPrepopulation setting.",
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            }
          }
        },
        "openshiftSDNConfig": {
          "description": "OpenShiftSDNConfig configures the three openshift-sdn plugins",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "mode"
          ],
          "properties": {
            "enableUnidling": {
              "description": "enableUnidling controls whether or not the service proxy will support idling and unidling of services. By default, unidling is enabled.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "mode": {
              "description": "mode is one of \"Multitenant\", \"Subnet\", or \"NetworkPolicy\"",
              "type": "string",
              "default": ""
            },
            "mtu": {
              "description": "mtu is the mtu to use for the tunnel interface. Defaults to 1450 if unset. This must be 50 bytes smaller than the machine's uplink.",
              "type": [
                "integer",
                "null"
              ],
              "format": "int64"
            },
            "useExternalOpenvswitch": {
              "description": "useExternalOpenvswitch used to control whether the operator would deploy an OVS DaemonSet itself or expect someone else to start OVS. As of 4.6, OVS is always run as a system service, and this flag is ignored. DEPRECATED: non-functional as of 4.6",
              "type": [
                "boolean",
                "null"
              ]
            },
            "vxlanPort": {
              "description": "vxlanPort is the port to use for all vxlan packets. The default is 4789.",
              "type": [
                "integer",
                "null"
              ],
              "format": "int64"
            }
          }
        },
        "ovnKubernetesConfig": {
          "description": "ovnKubernetesConfig contains the configuration parameters for networks using the ovn-kubernetes network project",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "egressIPConfig": {
              "description": "EgressIPConfig defines the configuration knobs for egressip",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "reachabilityTotalTimeoutSeconds": {
                  "description": "reachabilityTotalTimeout configures the EgressIP node reachability check total timeout in seconds. If the EgressIP node cannot be reached within this timeout, the node is declared down. Setting a large value may cause the EgressIP feature to react slowly to node changes. In particular, it may react slowly for EgressIP nodes that really have a genuine problem and are unreachable. When omitted, this means the user has no opinion and the platform is left to choose a reasonable default, which is subject to change over time. The current default is 1 second. A value of 0 disables the EgressIP node's reachability check.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int64"
                }
              }
            },
            "gatewayConfig": {
              "description": "GatewayConfig holds node gateway-related parsed config file parameters and command-line overrides",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "routingViaHost": {
                  "description": "RoutingViaHost allows pod egress traffic to exit via the ovn-k8s-mp0 management port into the host before sending it out. If this is not set, traffic will always egress directly from OVN to outside without touching the host stack. Setting this to true means hardware offload will not be supported. Default is false if GatewayConfig is specified.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                }
              }
            },
            "genevePort": {
              "description": "geneve port is the UDP port to be used by geneve encapulation. Default is 6081",
              "type": [
                "integer",
                "null"
              ],
              "format": "int64"
            },
            "hybridOverlayConfig": {
              "type": [
                "object",
                "null"
              ],
              "required": [
                "hybridClusterNetwork"
              ],
              "properties": {
                "hybridClusterNetwork": {
                  "description": "HybridClusterNetwork defines a network space given to nodes on an additional overlay network.",
                  "type": "array",
                  "items": {
                    "description": "ClusterNetworkEntry is a subnet from which to allocate PodIPs. A network of size HostPrefix (in CIDR notation) will be allocated when nodes join the cluster. If the HostPrefix field is not used by the plugin, it can be left unset. Not all network providers support multiple ClusterNetworks",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "cidr"
                    ],
                    "properties": {
                      "cidr": {
                        "type": "string",
                        "default": ""
                      },
                      "hostPrefix": {
                        "type": [
                          "integer",
                          "null"
                        ],
                        "format": "int64"
                      }
                    }
                  }
                },
                "hybridOverlayVXLANPort": {
                  "description": "HybridOverlayVXLANPort defines the VXLAN port number to be used by the additional overlay network. Default is 4789",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int64"
                }
              }
            },
            "ipsecConfig": {
              "type": [
                "object",
                "null"
              ]
            },
            "mtu": {
              "description": "mtu is the MTU to use for the tunnel interface. This must be 100 bytes smaller than the uplink mtu. Default is 1400",
              "type": [
                "integer",
                "null"
              ],
              "format": "int64"
            },
            "policyAuditConfig": {
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "destination": {
                  "description": "destination is the location for policy log messages. Regardless of this config, persistent logs will always be dumped to the host at /var/log/ovn/ however Additionally syslog output may be configured as follows. Valid values are: - \"libc\" -> to use the libc syslog() function of the host node's journdald process - \"udp:host:port\" -> for sending syslog over UDP - \"unix:file\" -> for using the UNIX domain socket directly - \"null\" -> to discard all messages logged to syslog The default is \"null\"",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "maxFileSize": {
                  "description": "maxFilesSize is the max size an ACL_audit log file is allowed to reach before rotation occurs Units are in MB and the Default is 50MB",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int64"
                },
                "rateLimit": {
                  "description": "rateLimit is the approximate maximum number of messages to generate per-second per-node. If unset the default of 20 msg/sec is used.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int64"
                },
                "syslogFacility": {
                  "description": "syslogFacility the RFC5424 facility for generated messages, e.g. \"kern\". Default is \"local0\"",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            },
            "v4InternalSubnet": {
              "description": "v4InternalSubnet is a v4 subnet used internally by ovn-kubernetes in case the default one is being already used by something else. It must not overlap with any other subnet being used by OpenShift or by the node network. The size of the subnet must be larger than the number of nodes. The value cannot be changed after installation. Default is 100.64.0.0/16",
              "type": [
                "string",
                "null"
              ]
            },
            "v6InternalSubnet": {
              "description": "v6InternalSubnet is a v6 subnet used internally by ovn-kubernetes in case the default one is being already used by something else. It must not overlap with any other subnet being used by OpenShift or by the node network. The size of the subnet must be larger than the number of nodes. The value cannot be changed after installation. Default is fd98::/48",
              "type": [
                "string",
                "null"
              ]
            }
          }
        },
        "type": {
          "description": "type is the type of network All NetworkTypes are supported except for NetworkTypeRaw",
          "type": "string",
          "default": ""
        }
      }
    },
    "deployKubeProxy": {
      "description": "deployKubeProxy specifies whether or not a standalone kube-proxy should be deployed by the operator. Some network providers include kube-proxy or similar functionality. If unset, the plugin will attempt to select the correct value, which is false when OpenShift SDN and ovn-kubernetes are used and true otherwise.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "disableMultiNetwork": {
      "description": "disableMultiNetwork specifies whether or not multiple pod network support should be disabled. If unset, this property defaults to 'false' and multiple network support is enabled.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "disableNetworkDiagnostics": {
      "description": "disableNetworkDiagnostics specifies whether or not PodNetworkConnectivityCheck CRs from a test pod to every node, apiserver and LB should be disabled or not. If unset, this property defaults to 'false' and network diagnostics is enabled. Setting this to 'true' would reduce the additional load of the pods performing the checks.",
      "type": [
        "boolean",
        "null"
      ],
      "default": false
    },
    "exportNetworkFlows": {
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "ipfix": {
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "collectors": {
              "description": "ipfixCollectors is list of strings formatted as ip:port with a maximum of ten items",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ],
                "default": ""
              }
            }
          }
        },
        "netFlow": {
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "collectors": {
              "description": "netFlow defines the NetFlow collectors that will consume the flow data exported from OVS. It is a list of strings formatted as ip:port with a maximum of ten items",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ],
                "default": ""
              }
            }
          }
        },
        "sFlow": {
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "collectors": {
              "description": "sFlowCollectors is list of strings formatted as ip:port with a maximum of ten items",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ],
                "default": ""
              }
            }
          }
        }
      }
    },
    "kubeProxyConfig": {
      "description": "ProxyConfig defines the configuration knobs for kubeproxy All of these are optional and have sensible defaults",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "bindAddress": {
          "description": "The address to \"bind\" on Defaults to 0.0.0.0",
          "type": [
            "string",
            "null"
          ]
        },
        "iptablesSyncPeriod": {
          "description": "An internal kube-proxy parameter. In older releases of OCP, this sometimes needed to be adjusted in large clusters for performance reasons, but this is no longer necessary, and there is no reason to change this from the default value. Default: 30s",
          "type": [
            "string",
            "null"
          ]
        },
        "proxyArguments": {
          "description": "Any additional arguments to pass to the kubeproxy process",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": [
                "string",
                "null"
              ],
              "default": ""
            }
          }
        }
      }
    },
    "logLevel": {
      "description": "logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands.\n\nValid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
      "type": [
        "string",
        "null"
      ]
    },
    "managementState": {
      "description": "managementState indicates whether and how the operator should manage the component",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "migration": {
      "description": "NetworkMigration represents the cluster network configuration.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "features": {
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "egressFirewall": {
              "description": "egressFirewall specifies whether or not the Egress Firewall configuration is migrated automatically when changing the cluster default network provider. If unset, this property defaults to 'true' and Egress Firewall configure is migrated.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "egressIP": {
              "description": "egressIP specifies whether or not the Egress IP configuration is migrated automatically when changing the cluster default network provider. If unset, this property defaults to 'true' and Egress IP configure is migrated.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "multicast": {
              "description": "multicast specifies whether or not the multicast configuration is migrated automatically when changing the cluster default network provider. If unset, this property defaults to 'true' and multicast configure is migrated.",
              "type": [
                "boolean",
                "null"
              ]
            }
          }
        },
        "mtu": {
          "description": "MTUMigration MTU contains infomation about MTU migration.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "machine": {
              "description": "MTUMigrationValues contains the values for a MTU migration.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "to"
              ],
              "properties": {
                "from": {
                  "description": "from is the MTU to migrate from.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int64"
                },
                "to": {
                  "description": "to is the MTU to migrate to.",
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "network": {
              "description": "MTUMigrationValues contains the values for a MTU migration.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "to"
              ],
              "properties": {
                "from": {
                  "description": "from is the MTU to migrate from.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int64"
                },
                "to": {
                  "description": "to is the MTU to migrate to.",
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "networkType": {
          "description": "networkType is the target type of network migration. Set this to the target network type to allow changing the default network. If unset, the operation of changing cluster default network plugin will be rejected. The supported values are OpenShiftSDN, OVNKubernetes",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "observedConfig": {
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\":\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
      "type": [
        "object",
        "null"
      ]
    },
    "operatorLogLevel": {
      "description": "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves.\n\nValid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
      "type": [
        "string",
        "null"
      ]
    },
    "serviceNetwork": {
      "description": "serviceNetwork is the ip address pool to use for Service IPs Currently, all existing network providers only support a single value here, but this is an array to allow for growth.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": [
          "string",
          "null"
        ],
        "default": ""
      }
    },
    "unsupportedConfigOverrides": {
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\":\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
      "type": [
        "object",
        "null"
      ]
    },
    "useMultiNetworkPolicy": {
      "description": "useMultiNetworkPolicy enables a controller which allows for MultiNetworkPolicy objects to be used on additional networks as created by Multus CNI. MultiNetworkPolicy are similar to NetworkPolicy objects, but NetworkPolicy objects only apply to the primary interface. With MultiNetworkPolicy, you can control the traffic that a pod can receive over the secondary interfaces. If unset, this property defaults to 'false' and MultiNetworkPolicy objects are ignored. If 'disableMultiNetwork' is 'true' then the value of this field is ignored.",
      "type": [
        "boolean",
        "null"
      ]
    }
  },
  "$schema": "http://json-schema.org/schema#"
}