{
  "description": "OpenstackProviderSpec is the type that will be embedded in a Machine.Spec.ProviderSpec field for an OpenStack Instance. It is used by the Openstack machine actuator to create a single machine instance. Compatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
  "type": "object",
  "required": [
    "cloudsSecret",
    "cloudName",
    "flavor",
    "image"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ]
    },
    "availabilityZone": {
      "description": "The availability zone from which to launch the server.",
      "type": [
        "string",
        "null"
      ]
    },
    "cloudName": {
      "description": "The name of the cloud to use from the clouds secret",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "cloudsSecret": {
      "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "name": {
          "description": "name is unique within a namespace to reference a secret resource.",
          "type": [
            "string",
            "null"
          ]
        },
        "namespace": {
          "description": "namespace defines the space within which the secret name must be unique.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "x-kubernetes-map-type": "atomic"
    },
    "configDrive": {
      "description": "Config Drive support",
      "type": [
        "boolean",
        "null"
      ]
    },
    "flavor": {
      "description": "The flavor reference for the flavor for your server instance.",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "floatingIP": {
      "description": "floatingIP specifies a floating IP to be associated with the machine. Note that it is not safe to use this parameter in a MachineSet, as only one Machine may be assigned the same floating IP.\n\nDeprecated: floatingIP will be removed in a future release as it cannot be implemented correctly.",
      "type": [
        "string",
        "null"
      ]
    },
    "image": {
      "description": "The name of the image to use for your server instance. If the RootVolume is specified, this will be ignored and use rootVolume directly.",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "keyName": {
      "description": "The ssh key to inject in the instance",
      "type": [
        "string",
        "null"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ]
    },
    "metadata": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "creationTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "deletionTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          },
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": [
            "string",
            "null"
          ]
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "fieldsType": {
                "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                "type": [
                  "string",
                  "null"
                ]
              },
              "fieldsV1": {
                "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                "type": [
                  "object",
                  "null"
                ]
              },
              "manager": {
                "description": "Manager is an identifier of the workflow managing these fields.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "operation": {
                "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "subresource": {
                "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "time": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              }
            }
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": [
            "string",
            "null"
          ]
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": [
            "string",
            "null"
          ]
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "apiVersion",
              "kind",
              "name",
              "uid"
            ],
            "properties": {
              "apiVersion": {
                "description": "API version of the referent.",
                "type": "string",
                "default": ""
              },
              "blockOwnerDeletion": {
                "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "controller": {
                "description": "If true, this reference points to the managing controller.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "kind": {
                "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string",
                "default": ""
              },
              "name": {
                "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                "type": "string",
                "default": ""
              },
              "uid": {
                "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                "type": "string",
                "default": ""
              }
            },
            "x-kubernetes-map-type": "atomic"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": [
            "string",
            "null"
          ]
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": [
            "string",
            "null"
          ]
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "networks": {
      "description": "A networks object. Required parameter when there are multiple networks defined for the tenant. When you do not specify the networks parameter, the server attaches to the only network created for the current tenant.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "filter": {
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "adminStateUp": {
                "description": "Deprecated: adminStateUp is silently ignored. It has no replacement.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "description": {
                "description": "description filters networks by description.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "id": {
                "description": "Deprecated: use NetworkParam.uuid instead. Ignored if NetworkParam.uuid is set.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "limit": {
                "description": "Deprecated: limit is silently ignored. It has no replacement.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int32"
              },
              "marker": {
                "description": "Deprecated: marker is silently ignored. It has no replacement.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "name": {
                "description": "name filters networks by name.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "notTags": {
                "description": "notTags filters by networks which don't match all specified tags. NOT (t1 AND t2...) Multiple tags are comma separated.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "notTagsAny": {
                "description": "notTagsAny filters by networks which don't match any specified tags. NOT (t1 OR t2...) Multiple tags are comma separated.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "projectId": {
                "description": "projectId filters networks by project ID.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "shared": {
                "description": "Deprecated: shared is silently ignored. It has no replacement.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "sortDir": {
                "description": "Deprecated: sortDir is silently ignored. It has no replacement.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "sortKey": {
                "description": "Deprecated: sortKey is silently ignored. It has no replacement.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "status": {
                "description": "Deprecated: status is silently ignored. It has no replacement.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "tags": {
                "description": "tags filters by networks containing all specified tags. Multiple tags are comma separated.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "tagsAny": {
                "description": "tagsAny filters by networks containing any specified tags. Multiple tags are comma separated.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "tenantId": {
                "description": "tenantId filters networks by tenant ID. Deprecated: use projectId instead. tenantId will be ignored if projectId is set.",
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          },
          "fixedIp": {
            "description": "A fixed IPv4 address for the NIC.",
            "type": [
              "string",
              "null"
            ]
          },
          "noAllowedAddressPairs": {
            "description": "NoAllowedAddressPairs disables creation of allowed address pairs for the network ports",
            "type": [
              "boolean",
              "null"
            ]
          },
          "portSecurity": {
            "description": "PortSecurity optionally enables or disables security on ports managed by OpenStack",
            "type": [
              "boolean",
              "null"
            ]
          },
          "portTags": {
            "description": "PortTags allows users to specify a list of tags to add to ports created in a given network",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": [
                "string",
                "null"
              ],
              "default": ""
            }
          },
          "profile": {
            "description": "A dictionary that enables the application running on the specified host to pass and receive virtual network interface (VIF) port-specific information to the plug-in.",
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": {
              "type": [
                "string",
                "null"
              ],
              "default": ""
            }
          },
          "subnets": {
            "description": "Subnet within a network to use",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "filter": {
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "cidr": {
                      "description": "cidr filters subnets by CIDR.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "description": {
                      "description": "description filters subnets by description.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "enableDhcp": {
                      "description": "Deprecated: enableDhcp is silently ignored. It has no replacement.",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "gateway_ip": {
                      "description": "gateway_ip filters subnets by gateway IP.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "id": {
                      "description": "id is the uuid of a specific subnet to use. If specified, id will not be validated. Instead server creation will fail with an appropriate error.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "ipVersion": {
                      "description": "ipVersion filters subnets by IP version.",
                      "type": [
                        "integer",
                        "null"
                      ],
                      "format": "int32"
                    },
                    "ipv6AddressMode": {
                      "description": "ipv6AddressMode filters subnets by IPv6 address mode.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "ipv6RaMode": {
                      "description": "ipv6RaMode filters subnets by IPv6 router adversiement mode.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "limit": {
                      "description": "Deprecated: limit is silently ignored. It has no replacement.",
                      "type": [
                        "integer",
                        "null"
                      ],
                      "format": "int32"
                    },
                    "marker": {
                      "description": "Deprecated: marker is silently ignored. It has no replacement.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "name": {
                      "description": "name filters subnets by name.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "networkId": {
                      "description": "Deprecated: networkId is silently ignored. Set uuid on the containing network definition instead.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "notTags": {
                      "description": "notTags filters by subnets which don't match all specified tags. NOT (t1 AND t2...) Multiple tags are comma separated.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "notTagsAny": {
                      "description": "notTagsAny filters by subnets which don't match any specified tags. NOT (t1 OR t2...) Multiple tags are comma separated.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "projectId": {
                      "description": "projectId filters subnets by project ID.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "sortDir": {
                      "description": "Deprecated: sortDir is silently ignored. It has no replacement.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "sortKey": {
                      "description": "Deprecated: sortKey is silently ignored. It has no replacement.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "subnetpoolId": {
                      "description": "subnetpoolId filters subnets by subnet pool ID.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "tags": {
                      "description": "tags filters by subnets containing all specified tags. Multiple tags are comma separated.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "tagsAny": {
                      "description": "tagsAny filters by subnets containing any specified tags. Multiple tags are comma separated.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "tenantId": {
                      "description": "tenantId filters subnets by tenant ID. Deprecated: use projectId instead. tenantId will be ignored if projectId is set.",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  }
                },
                "portSecurity": {
                  "description": "PortSecurity optionally enables or disables security on ports managed by OpenStack",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "portTags": {
                  "description": "PortTags are tags that are added to ports created on this subnet",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "default": ""
                  }
                },
                "uuid": {
                  "description": "The UUID of the network. Required if you omit the port attribute.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          },
          "uuid": {
            "description": "The UUID of the network. Required if you omit the port attribute.",
            "type": [
              "string",
              "null"
            ]
          },
          "vnicType": {
            "description": "The virtual network interface card (vNIC) type that is bound to the neutron port.",
            "type": [
              "string",
              "null"
            ]
          }
        }
      }
    },
    "ports": {
      "description": "Create and assign additional ports to instances",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": [
          "object",
          "null"
        ],
        "required": [
          "networkID"
        ],
        "properties": {
          "adminStateUp": {
            "description": "adminStateUp sets the administrative state of the created port to up (true), or down (false).",
            "type": [
              "boolean",
              "null"
            ]
          },
          "allowedAddressPairs": {
            "description": "allowedAddressPairs specifies a set of allowed address pairs to add to the port.",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "ipAddress": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "macAddress": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          },
          "description": {
            "description": "description specifies the description of the created port.",
            "type": [
              "string",
              "null"
            ]
          },
          "fixedIPs": {
            "description": "fixedIPs specifies a set of fixed IPs to assign to the port. They must all be valid for the port's network.",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": [
                "object",
                "null"
              ],
              "required": [
                "subnetID"
              ],
              "properties": {
                "ipAddress": {
                  "description": "ipAddress is a specific IP address to use in the given subnet. Port creation will fail if the address is not available. If not specified, an available IP from the given subnet will be selected automatically.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "subnetID": {
                  "description": "subnetID specifies the ID of the subnet where the fixed IP will be allocated.",
                  "type": "string",
                  "default": ""
                }
              }
            }
          },
          "hostID": {
            "description": "The ID of the host where the port is allocated. Do not use this field: it cannot be used correctly. Deprecated: hostID is silently ignored. It will be removed with no replacement.",
            "type": [
              "string",
              "null"
            ]
          },
          "macAddress": {
            "description": "macAddress specifies the MAC address of the created port.",
            "type": [
              "string",
              "null"
            ]
          },
          "nameSuffix": {
            "description": "If nameSuffix is specified the created port will be named <machine name>-<nameSuffix>. If not specified the port will be named <machine-name>-<index of this port>.",
            "type": [
              "string",
              "null"
            ]
          },
          "networkID": {
            "description": "networkID is the ID of the network the port will be created in. It is required.",
            "type": "string",
            "default": ""
          },
          "portSecurity": {
            "description": "enable or disable security on a given port incompatible with securityGroups and allowedAddressPairs",
            "type": [
              "boolean",
              "null"
            ]
          },
          "profile": {
            "description": "A dictionary that enables the application running on the specified host to pass and receive virtual network interface (VIF) port-specific information to the plug-in.",
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": {
              "type": [
                "string",
                "null"
              ],
              "default": ""
            }
          },
          "projectID": {
            "description": "projectID specifies the project ID of the created port. Note that this requires OpenShift to have administrative permissions, which is typically not the case. Use of this field is not recommended.",
            "type": [
              "string",
              "null"
            ]
          },
          "securityGroups": {
            "description": "securityGroups specifies a set of security group UUIDs to use instead of the machine's default security groups. The default security groups will be used if this is left empty or not specified.",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": [
                "string",
                "null"
              ],
              "default": ""
            }
          },
          "tags": {
            "description": "tags species a set of tags to add to the port.",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": [
                "string",
                "null"
              ],
              "default": ""
            }
          },
          "tenantID": {
            "description": "tenantID specifies the tenant ID of the created port. Note that this requires OpenShift to have administrative permissions, which is typically not the case. Use of this field is not recommended. Deprecated: use projectID instead. It will be ignored if projectID is set.",
            "type": [
              "string",
              "null"
            ]
          },
          "trunk": {
            "description": "Enables and disables trunk at port level. If not provided, openStackMachine.Spec.Trunk is inherited.",
            "type": [
              "boolean",
              "null"
            ]
          },
          "vnicType": {
            "description": "The virtual network interface card (vNIC) type that is bound to the neutron port.",
            "type": [
              "string",
              "null"
            ]
          }
        }
      }
    },
    "primarySubnet": {
      "description": "The subnet that a set of machines will get ingress/egress traffic from",
      "type": [
        "string",
        "null"
      ]
    },
    "rootVolume": {
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "availabilityZone": {
          "description": "availabilityZone specifies the Cinder availability where the root volume will be created.",
          "type": [
            "string",
            "null"
          ]
        },
        "deviceType": {
          "description": "Deprecated: deviceType will be silently ignored. There is no replacement.",
          "type": [
            "string",
            "null"
          ]
        },
        "diskSize": {
          "description": "diskSize specifies the size, in GB, of the created root volume.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "sourceType": {
          "description": "Deprecated: sourceType will be silently ignored. There is no replacement.",
          "type": [
            "string",
            "null"
          ]
        },
        "sourceUUID": {
          "description": "sourceUUID specifies the UUID of a glance image used to populate the root volume. Deprecated: set image in the platform spec instead. This will be ignored if image is set in the platform spec.",
          "type": [
            "string",
            "null"
          ]
        },
        "volumeType": {
          "description": "volumeType specifies a volume type to use when creating the root volume. If not specified the default volume type will be used.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "securityGroups": {
      "description": "The names of the security groups to assign to the instance",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "filter": {
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "description": {
                "description": "description filters security groups by description.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "id": {
                "description": "id specifies the ID of a security group to use. If set, id will not be validated before use. An invalid id will result in failure to create a server with an appropriate error message.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "limit": {
                "description": "Deprecated: limit is silently ignored. It has no replacement.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int32"
              },
              "marker": {
                "description": "Deprecated: marker is silently ignored. It has no replacement.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "name": {
                "description": "name filters security groups by name.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "notTags": {
                "description": "notTags filters by security groups which don't match all specified tags. NOT (t1 AND t2...) Multiple tags are comma separated.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "notTagsAny": {
                "description": "notTagsAny filters by security groups which don't match any specified tags. NOT (t1 OR t2...) Multiple tags are comma separated.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "projectId": {
                "description": "projectId filters security groups by project ID.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "sortDir": {
                "description": "Deprecated: sortDir is silently ignored. It has no replacement.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "sortKey": {
                "description": "Deprecated: sortKey is silently ignored. It has no replacement.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "tags": {
                "description": "tags filters by security groups containing all specified tags. Multiple tags are comma separated.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "tagsAny": {
                "description": "tagsAny filters by security groups containing any specified tags. Multiple tags are comma separated.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "tenantId": {
                "description": "tenantId filters security groups by tenant ID. Deprecated: use projectId instead. tenantId will be ignored if projectId is set.",
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          },
          "name": {
            "description": "Security Group name",
            "type": [
              "string",
              "null"
            ]
          },
          "uuid": {
            "description": "Security Group UUID",
            "type": [
              "string",
              "null"
            ]
          }
        }
      }
    },
    "serverGroupID": {
      "description": "The server group to assign the machine to.",
      "type": [
        "string",
        "null"
      ]
    },
    "serverGroupName": {
      "description": "The server group to assign the machine to. A server group with that name will be created if it does not exist. If both ServerGroupID and ServerGroupName are non-empty, they must refer to the same OpenStack resource.",
      "type": [
        "string",
        "null"
      ]
    },
    "serverMetadata": {
      "description": "Metadata mapping. Allows you to create a map of key value pairs to add to the server instance.",
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": {
        "type": [
          "string",
          "null"
        ],
        "default": ""
      }
    },
    "sshUserName": {
      "description": "The machine ssh username",
      "type": [
        "string",
        "null"
      ]
    },
    "tags": {
      "description": "Machine tags Requires Nova api 2.52 minimum!",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": [
          "string",
          "null"
        ],
        "default": ""
      }
    },
    "trunk": {
      "description": "Whether the server instance is created on a trunk port or not.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "userDataSecret": {
      "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "name": {
          "description": "name is unique within a namespace to reference a secret resource.",
          "type": [
            "string",
            "null"
          ]
        },
        "namespace": {
          "description": "namespace defines the space within which the secret name must be unique.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "x-kubernetes-map-type": "atomic"
    }
  },
  "$schema": "http://json-schema.org/schema#"
}