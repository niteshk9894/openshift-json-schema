{
  "description": "Compatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
  "type": "object",
  "required": [
    "servingInfo",
    "corsAllowedOrigins",
    "auditConfig",
    "storageConfig",
    "admission",
    "kubeClientConfig",
    "aggregatorConfig",
    "imagePolicyConfig",
    "projectConfig",
    "routingConfig",
    "serviceAccountOAuthGrantMethod",
    "jenkinsPipelineConfig",
    "cloudProviderFile",
    "apiServerArguments"
  ],
  "properties": {
    "admission": {
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "disabledPlugins": {
          "description": "disabledPlugins is a list of admission plugins that must be off.  Putting something in this list is almost always a mistake and likely to result in cluster instability.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "enabledPlugins": {
          "description": "enabledPlugins is a list of admission plugins that must be on in addition to the default list. Some admission plugins are disabled by default, but certain configurations require them.  This is fairly uncommon and can result in performance penalties and unexpected behavior.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "pluginConfig": {
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "description": "AdmissionPluginConfig holds the necessary configuration options for admission plugins",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "location",
              "configuration"
            ],
            "properties": {
              "configuration": {
                "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\":\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
                "type": "object"
              },
              "location": {
                "description": "Location is the path to a configuration file that contains the plugin's configuration",
                "type": "string",
                "default": ""
              }
            }
          }
        }
      }
    },
    "aggregatorConfig": {
      "type": [
        "object",
        "null"
      ],
      "required": [
        "clientCA",
        "allowedNames",
        "usernameHeaders",
        "groupHeaders",
        "extraHeaderPrefixes"
      ],
      "properties": {
        "allowedNames": {
          "description": "allowedNames is an optional list of common names to require a match from.",
          "type": "array",
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "clientCA": {
          "description": "clientCA is a path to the CA bundle to use to verify the common name of the front proxy's client cert",
          "type": "string",
          "default": ""
        },
        "extraHeaderPrefixes": {
          "description": "extraHeaderPrefixes is the set of header prefixes to check for user extra",
          "type": "array",
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "groupHeaders": {
          "description": "groupHeaders is the set of headers to check for groups",
          "type": "array",
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "usernameHeaders": {
          "description": "usernameHeaders is the set of headers to check for the username",
          "type": "array",
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        }
      }
    },
    "apiServerArguments": {
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": {
        "type": [
          "array",
          "null"
        ],
        "items": {
          "type": [
            "string",
            "null"
          ],
          "default": ""
        }
      }
    },
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ]
    },
    "auditConfig": {
      "description": "AuditConfig holds configuration for the audit capabilities",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "enabled",
        "auditFilePath",
        "maximumFileRetentionDays",
        "maximumRetainedFiles",
        "maximumFileSizeMegabytes",
        "policyFile",
        "policyConfiguration",
        "logFormat",
        "webHookKubeConfig",
        "webHookMode"
      ],
      "properties": {
        "auditFilePath": {
          "description": "All requests coming to the apiserver will be logged to this file.",
          "type": "string",
          "default": ""
        },
        "enabled": {
          "description": "If this flag is set, audit log will be printed in the logs. The logs contains, method, user and a requested URL.",
          "type": "boolean",
          "default": false
        },
        "logFormat": {
          "description": "Format of saved audits (legacy or json).",
          "type": "string",
          "default": ""
        },
        "maximumFileRetentionDays": {
          "description": "Maximum number of days to retain old log files based on the timestamp encoded in their filename.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "maximumFileSizeMegabytes": {
          "description": "Maximum size in megabytes of the log file before it gets rotated. Defaults to 100MB.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "maximumRetainedFiles": {
          "description": "Maximum number of old log files to retain.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "policyConfiguration": {
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\":\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
          "type": "object"
        },
        "policyFile": {
          "description": "PolicyFile is a path to the file that defines the audit policy configuration.",
          "type": "string",
          "default": ""
        },
        "webHookKubeConfig": {
          "description": "Path to a .kubeconfig formatted file that defines the audit webhook configuration.",
          "type": "string",
          "default": ""
        },
        "webHookMode": {
          "description": "Strategy for sending audit events (block or batch).",
          "type": "string",
          "default": ""
        }
      }
    },
    "cloudProviderFile": {
      "description": "cloudProviderFile points to the cloud config file",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "corsAllowedOrigins": {
      "description": "corsAllowedOrigins",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": [
          "string",
          "null"
        ],
        "default": ""
      }
    },
    "imagePolicyConfig": {
      "type": [
        "object",
        "null"
      ],
      "required": [
        "maxImagesBulkImportedPerRepository",
        "allowedRegistriesForImport",
        "internalRegistryHostname",
        "externalRegistryHostnames",
        "additionalTrustedCA"
      ],
      "properties": {
        "additionalTrustedCA": {
          "description": "additionalTrustedCA is a path to a pem bundle file containing additional CAs that should be trusted during imagestream import.",
          "type": "string",
          "default": ""
        },
        "allowedRegistriesForImport": {
          "description": "allowedRegistriesForImport limits the container image registries that normal users may import images from. Set this list to the registries that you trust to contain valid Docker images and that you want applications to be able to import from. Users with permission to create Images or ImageStreamMappings via the API are not affected by this policy - typically only administrators or system integrations will have those permissions.",
          "type": "array",
          "items": {
            "description": "RegistryLocation contains a location of the registry specified by the registry domain name. The domain name might include wildcards, like '*' or '??'.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "domainName"
            ],
            "properties": {
              "domainName": {
                "description": "DomainName specifies a domain name for the registry In case the registry use non-standard (80 or 443) port, the port should be included in the domain name as well.",
                "type": "string",
                "default": ""
              },
              "insecure": {
                "description": "Insecure indicates whether the registry is secure (https) or insecure (http) By default (if not specified) the registry is assumed as secure.",
                "type": [
                  "boolean",
                  "null"
                ]
              }
            }
          }
        },
        "externalRegistryHostnames": {
          "description": "externalRegistryHostnames provides the hostnames for the default external image registry. The external hostname should be set only when the image registry is exposed externally. The first value is used in 'publicDockerImageRepository' field in ImageStreams. The value must be in \"hostname[:port]\" format.",
          "type": "array",
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "internalRegistryHostname": {
          "description": "internalRegistryHostname sets the hostname for the default internal image registry. The value must be in \"hostname[:port]\" format. For backward compatibility, users can still use OPENSHIFT_DEFAULT_REGISTRY environment variable but this setting overrides the environment variable.",
          "type": "string",
          "default": ""
        },
        "maxImagesBulkImportedPerRepository": {
          "description": "maxImagesBulkImportedPerRepository controls the number of images that are imported when a user does a bulk import of a container repository. This number is set low to prevent users from importing large numbers of images accidentally. Set -1 for no limit.",
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      }
    },
    "jenkinsPipelineConfig": {
      "description": "JenkinsPipelineConfig holds configuration for the Jenkins pipeline strategy",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "autoProvisionEnabled",
        "templateNamespace",
        "templateName",
        "serviceName",
        "parameters"
      ],
      "properties": {
        "autoProvisionEnabled": {
          "description": "autoProvisionEnabled determines whether a Jenkins server will be spawned from the provided template when the first build config in the project with type JenkinsPipeline is created. When not specified this option defaults to true.",
          "type": "boolean"
        },
        "parameters": {
          "description": "parameters specifies a set of optional parameters to the Jenkins template.",
          "type": "object",
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "serviceName": {
          "description": "serviceName is the name of the Jenkins service OpenShift uses to detect whether a Jenkins pipeline handler has already been installed in a project. This value *must* match a service name in the provided template.",
          "type": "string",
          "default": ""
        },
        "templateName": {
          "description": "templateName is the name of the default Jenkins template",
          "type": "string",
          "default": ""
        },
        "templateNamespace": {
          "description": "templateNamespace contains the namespace name where the Jenkins template is stored",
          "type": "string",
          "default": ""
        }
      }
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ]
    },
    "kubeClientConfig": {
      "type": [
        "object",
        "null"
      ],
      "required": [
        "kubeConfig",
        "connectionOverrides"
      ],
      "properties": {
        "connectionOverrides": {
          "type": "object",
          "required": [
            "acceptContentTypes",
            "contentType",
            "qps",
            "burst"
          ],
          "properties": {
            "acceptContentTypes": {
              "description": "acceptContentTypes defines the Accept header sent by clients when connecting to a server, overriding the default value of 'application/json'. This field will control all connections to the server used by a particular client.",
              "type": "string",
              "default": ""
            },
            "burst": {
              "description": "burst allows extra queries to accumulate when a client is exceeding its rate.",
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "contentType": {
              "description": "contentType is the content type used when sending data to the server from this client.",
              "type": "string",
              "default": ""
            },
            "qps": {
              "description": "qps controls the number of queries per second allowed for this connection.",
              "type": "number",
              "format": "float",
              "default": 0
            }
          }
        },
        "kubeConfig": {
          "description": "kubeConfig is a .kubeconfig filename for going to the owning kube-apiserver.  Empty uses an in-cluster-config",
          "type": "string",
          "default": ""
        }
      }
    },
    "projectConfig": {
      "type": [
        "object",
        "null"
      ],
      "required": [
        "defaultNodeSelector",
        "projectRequestMessage",
        "projectRequestTemplate"
      ],
      "properties": {
        "defaultNodeSelector": {
          "description": "defaultNodeSelector holds default project node label selector",
          "type": "string",
          "default": ""
        },
        "projectRequestMessage": {
          "description": "projectRequestMessage is the string presented to a user if they are unable to request a project via the projectrequest api endpoint",
          "type": "string",
          "default": ""
        },
        "projectRequestTemplate": {
          "description": "projectRequestTemplate is the template to use for creating projects in response to projectrequest. It is in the format namespace/template and it is optional. If it is not specified, a default template is used.",
          "type": "string",
          "default": ""
        }
      }
    },
    "routingConfig": {
      "description": "RoutingConfig holds the necessary configuration options for routing to subdomains",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "subdomain"
      ],
      "properties": {
        "subdomain": {
          "description": "subdomain is the suffix appended to $service.$namespace. to form the default route hostname DEPRECATED: This field is being replaced by routers setting their own defaults. This is the \"default\" route.",
          "type": "string",
          "default": ""
        }
      }
    },
    "serviceAccountOAuthGrantMethod": {
      "description": "serviceAccountOAuthGrantMethod is used for determining client authorization for service account oauth client. It must be either: deny, prompt, or \"\"",
      "type": [
        "string",
        "null"
      ],
      "default": ""
    },
    "servingInfo": {
      "description": "HTTPServingInfo holds configuration for serving HTTP",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "bindAddress",
        "bindNetwork",
        "certFile",
        "keyFile",
        "maxRequestsInFlight",
        "requestTimeoutSeconds"
      ],
      "properties": {
        "bindAddress": {
          "description": "BindAddress is the ip:port to serve on",
          "type": "string",
          "default": ""
        },
        "bindNetwork": {
          "description": "BindNetwork is the type of network to bind to - defaults to \"tcp4\", accepts \"tcp\", \"tcp4\", and \"tcp6\"",
          "type": "string",
          "default": ""
        },
        "certFile": {
          "description": "CertFile is a file containing a PEM-encoded certificate",
          "type": "string",
          "default": ""
        },
        "cipherSuites": {
          "description": "CipherSuites contains an overridden list of ciphers for the server to support. Values must match cipher suite IDs from https://golang.org/pkg/crypto/tls/#pkg-constants",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        },
        "clientCA": {
          "description": "ClientCA is the certificate bundle for all the signers that you'll recognize for incoming client certificates",
          "type": [
            "string",
            "null"
          ]
        },
        "keyFile": {
          "description": "KeyFile is a file containing a PEM-encoded private key for the certificate specified by CertFile",
          "type": "string",
          "default": ""
        },
        "maxRequestsInFlight": {
          "description": "MaxRequestsInFlight is the number of concurrent requests allowed to the server. If zero, no limit.",
          "type": "integer",
          "format": "int64",
          "default": 0
        },
        "minTLSVersion": {
          "description": "MinTLSVersion is the minimum TLS version supported. Values must match version names from https://golang.org/pkg/crypto/tls/#pkg-constants",
          "type": [
            "string",
            "null"
          ]
        },
        "namedCertificates": {
          "description": "NamedCertificates is a list of certificates to use to secure requests to specific hostnames",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "NamedCertificate specifies a certificate/key, and the names it should be served for",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "certFile",
              "keyFile"
            ],
            "properties": {
              "certFile": {
                "description": "CertFile is a file containing a PEM-encoded certificate",
                "type": "string",
                "default": ""
              },
              "keyFile": {
                "description": "KeyFile is a file containing a PEM-encoded private key for the certificate specified by CertFile",
                "type": "string",
                "default": ""
              },
              "names": {
                "description": "Names is a list of DNS names this certificate should be used to secure A name can be a normal DNS name, or can contain leading wildcard segments.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": [
                    "string",
                    "null"
                  ],
                  "default": ""
                }
              }
            }
          }
        },
        "requestTimeoutSeconds": {
          "description": "RequestTimeoutSeconds is the number of seconds before requests are timed out. The default is 60 minutes, if -1 there is no limit on requests.",
          "type": "integer",
          "format": "int64",
          "default": 0
        }
      }
    },
    "storageConfig": {
      "type": [
        "object",
        "null"
      ],
      "required": [
        "ca",
        "certFile",
        "keyFile",
        "storagePrefix"
      ],
      "properties": {
        "ca": {
          "description": "CA is a file containing trusted roots for the etcd server certificates",
          "type": "string",
          "default": ""
        },
        "certFile": {
          "description": "CertFile is a file containing a PEM-encoded certificate",
          "type": "string",
          "default": ""
        },
        "keyFile": {
          "description": "KeyFile is a file containing a PEM-encoded private key for the certificate specified by CertFile",
          "type": "string",
          "default": ""
        },
        "storagePrefix": {
          "description": "StoragePrefix is the path within etcd that the OpenShift resources will be rooted under. This value, if changed, will mean existing objects in etcd will no longer be located.",
          "type": "string",
          "default": ""
        },
        "urls": {
          "description": "URLs are the URLs for etcd",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "string",
              "null"
            ],
            "default": ""
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/schema#"
}